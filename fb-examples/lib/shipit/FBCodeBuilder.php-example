<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * This file was moved from fbsource to www. View old history in diffusion:
 * https://fburl.com/0e15lqye
 */
namespace Facebook\ShipIt;

use namespace HH\Lib\Str;

final class FBCodeBuilder {
  const string SRC_FBCODE_BUILDER = 'fbcode/opensource/fbcode_builder/';
  const string DEST_FBCODE_BUILDER = 'build/fbcode_builder/';

  // The github hashes change frequently. We keep them under build/ so that
  // `git log projectname/` stays relatively un-spammy.  Then, nest under
  // `facebook` for a future-proof pattern of `<github user>/<github repo>`.
  const string SRC_GITHUB_HASHES = 'fbcode/opensource/project_hashes/';
  const string DEST_GITHUB_HASHES = 'build/deps/github_hashes/';

  public static function getPathMappings(
    ?string $travis_config = null,
  ): dict<string, string> {
    if ($travis_config === null) {
      $travis_config = FBCodeBuilder::SRC_FBCODE_BUILDER.'travis.yml';
    }
    return dict[
      $travis_config => '.travis.yml',
      FBCodeBuilder::SRC_FBCODE_BUILDER => FBCodeBuilder::DEST_FBCODE_BUILDER,
      FBCodeBuilder::SRC_GITHUB_HASHES => FBCodeBuilder::DEST_GITHUB_HASHES,
    ];
  }
  public static function getDestStrippedFiles(): vec<string> {
    return vec[
      // Don't bother Github users with code only relevant internally.
      '@^build/facebook_.*@',
      '@^'.FBCodeBuilder::DEST_GITHUB_HASHES.'@',
      '@^'.FBCodeBuilder::DEST_FBCODE_BUILDER.'facebook_@',
      '@^'.FBCodeBuilder::DEST_FBCODE_BUILDER.'README.facebook$@',
      '@^'.FBCodeBuilder::DEST_FBCODE_BUILDER.'TARGETS@',
    ];
  }
  public static function getDestStrippedFileExceptions(
    keyset<string> $dependencies,
  ): vec<string> {
    return vec[
      '@^'.FBCodeBuilder::DEST_GITHUB_HASHES.'$@',
      '@^'.
      FBCodeBuilder::DEST_GITHUB_HASHES.
      '('.
      Str\join(Keyset\map($dependencies, $d ==> PHP\preg_quote($d, '@')), '|').
      ')-rev.txt$@',
      // This is just to appease ShipItFilterSanityCheckPhase
      '@^'.FBCodeBuilder::DEST_GITHUB_HASHES.'shipit_test_file.txt$@',
    ];
  }
}

interface ISupportsFBCodeBuilder {}

/**
 * Use this trait in your FBShipItConfig implementation to enable
 * opensource/fbcode_builder/README* for your project.
 *
 * You will need to:
 *  - Define the abstract methods this trait needs,
 *  - Use this in your filter chain:
 *      ShipItPathFilters::moveDirectories($$, static::getPathMappings())
 *
 * This copies `opensource/fbcode_builder` into `build/fbcode_builder` in
 * your Github repo, and also copies the Github hashes of your fbcode
 * dependencies into `build/deps/github_hashes/facebook`.
 *
 * It will also copy the generic `opensource/fbcode_builder/travis.yml` into
 * `.travis.yml` on Github -- but if necessary, you can replace it with a
 * custom one in your projectFilterChangesetNonFBCodeBuilder().
 *
 * Once your ShipIt diff is committed and pushed, you can task the Open
 * Source oncall to enable Travis builds for your repo.
 *
 * Why a trait? -- This awkward form of composition ensures that
 * `fbcode_builder` modifications to your changeset can be made in the
 * appropriate parts of the filter chain.
 */
trait FBCodeBuilderTrait implements ISupportsFBCodeBuilder {
  require extends FBShipItConfig;

  // Implement the same as you would write a vanilla projectFilterChangeset()
  protected function projectFilterChangesetNonFBCodeBuilder(
    ShipItChangeset $changeset,
    GetPathMappingsFn $get_path_mappings,
  ): ShipItChangeset {
    return parent::defaultProjectFilterChangeset(
      $changeset,
      $get_path_mappings,
    );
  }
  // Implement the same as you would write a vanilla getPathMappings()
  abstract public static function getPathMappingsNonFBCodeBuilder(
  ): dict<string, string>;
  // Pick project names from fbcode/opensource/project_hashes/facebook.  If
  // your dependency isn't there, you need to enable TagIt for it.
  abstract protected static function getFBCodeBuilderDependencies(
  ): keyset<string>;

  protected static function getFBCodeBuilderTravisConfig(): string {
    return FBCodeBuilder::SRC_FBCODE_BUILDER.'travis.yml';
  }

  public static function getFBCodeBuilderPathMappings(): dict<string, string> {
    return FBCodeBuilder::getPathMappings(
      static::getFBCodeBuilderTravisConfig(),
    );
  }

  // Adds fbcode_builder's path mappings to the per-project path mappings.
  // `projectFilterChangesetNonFBCodeBuilder` will `moveDirectories` for us.
  <<__Override>>
  final public function getDefaultPathMappings(): dict<string, string> {
    return Dict\merge(
      static::getPathMappingsNonFBCodeBuilder(),
      self::getFBCodeBuilderPathMappings(),
    );
  }

  <<__Override>>
  final public function defaultProjectFilterChangeset(
    ShipItChangeset $changeset,
    GetPathMappingsFn $get_path_mappings,
  ): ShipItChangeset {
    $dependencies = static::getFBCodeBuilderDependencies();
    return $changeset
      // We are counting on this to call
      //   ShipItPathFilters::moveDirectories($$, static::getPathMappings())
      |> $this->projectFilterChangesetNonFBCodeBuilder($$, $get_path_mappings)
      // Strip all project_hashes except those of our dependencies.
      // Strip code specific to Facebook's internal continuous integration.
      |> ShipItPathFilters::stripPaths(
        $$,
        FBCodeBuilder::getDestStrippedFiles(),
        FBCodeBuilder::getDestStrippedFileExceptions($dependencies),
      );
  }
}
