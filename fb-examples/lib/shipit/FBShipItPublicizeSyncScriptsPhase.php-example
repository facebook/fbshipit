<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * This file was moved from fbsource to www. View old history in diffusion:
 * https://fburl.com/plvxi19e
 */
namespace Facebook\ShipIt;

use namespace HH\Lib\Str;

/**
 * We only publish the scripts for public repos. This creates an issue
 * when the repository is initially private, made public, then the fbshipit
 * script is modified. To work around this, automatically add stuff that's
 * newly public.
 */
final class FBShipItPublicizeSyncScriptsPhase extends ShipItPhase {
  public function __construct(
    private (function(ShipItChangeset): ShipItChangeset) $filter,
  ) {
  }

  <<__Override>>
  protected function isProjectSpecific(): bool {
    return true;
  }

  <<__Override>>
  public function getReadableName(): string {
    return 'release sync scripts and tests for newly-public projects';
  }

  <<__Override>>
  protected function runImpl(ShipItBaseConfig $config): void {
    $dest = ShipItRepo::typedOpen(
      ShipItDestinationRepo::class,
      $config->getDestinationPath(),
      $config->getDestinationBranch(),
    );

    $src_rev = $dest->findLastSourceCommit(keyset[]);
    if ($src_rev === null) {
      return;
    }

    $export = ShipItCreateNewRepoPhase::createNewGitRepo(
      $config,
      $this->filter,
      shape(
        'name' => 'FBShipIt Internal Commit',
        'email' => 'fbshipit@example.com',
      ),
      $src_rev,
    );

    $export_root = \realpath($export->getPath());
    $dest_root = \realpath($config->getDestinationPath());

    $globs = keyset[
      '/fb-examples/bin/importit_*.php-example',
      '/fb-examples/bin/shipit_*.php-example',
      '/fb-examples/tests/importit/projects/*.php-example',
      '/fb-examples/tests/shipit/projects/*.php-example',
    ];
    $files = keyset[];
    foreach ($globs as $glob) {
      /* HH_IGNORE_ERROR[2049] __PHPStdLib */
      /* HH_IGNORE_ERROR[4107] __PHPStdLib */
      $files = Keyset\union($files, \glob($export_root.$glob));
    }
    $files = Keyset\map($files, $file ==> \realpath($file));

    foreach ($files as $file) {
      invariant(
        Str\slice($file, 0, Str\length($export_root)) === $export_root,
        'file %s is not inside %s',
        $file,
        $export_root,
      );
      $dest_file = $dest_root.Str\slice($file, Str\length($export_root));
      /* HH_IGNORE_ERROR[2049] __PHPStdLib */
      /* HH_IGNORE_ERROR[4107] __PHPStdLib */
      if (!\file_exists($dest_file)) {
        $this->releaseFile($dest, $file, $dest_file);
      }
    }
  }

  private function releaseFile(
    ShipItDestinationRepo $repo,
    string $exported_file,
    string $destination_file,
  ): void {
    $dest_root = $repo->getPath();
    /* HH_IGNORE_ERROR[2049] __PHPStdLib */
    /* HH_IGNORE_ERROR[4107] __PHPStdLib */
    \copy($exported_file, $destination_file);

    /* HH_FIXME[4128] Use ShipItShellCommand */
    ShipItUtil::shellExec(
      $dest_root,
      /* stdin = */ null,
      ShipItUtil::DONT_VERBOSE,
      'git',
      'add',
      $destination_file,
    );
    /* HH_FIXME[4128] Use ShipItShellCommand */
    ShipItUtil::shellExec(
      $dest_root,
      /* stdin = */ null,
      ShipItUtil::DONT_VERBOSE,
      'git',
      'commit',
      '-m',
      /* HH_IGNORE_ERROR[2049] __PHPStdLib */
      /* HH_IGNORE_ERROR[4107] __PHPStdLib */
      '[autocommit] release '.\basename($destination_file),
    );
  }
}
