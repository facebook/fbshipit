<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * This file was moved from fbsource to www. View old history in diffusion:
 * https://fburl.com/wn8ui3x2
 */
namespace Facebook\ShipIt;

use type Facebook\ShipIt\Config\FBShipItConfigClasses;

final class FBDumpShipItMetadata {

  const type TShipItMetadata = shape(
    'destination' => shape(
      'branch' => string,
      'owner' => string,
      'project' => string,
    ),
    'source' => shape(
      'branch' => string,
      'roots' => keyset<string>,
    ),
    'is_land_branch' => bool,
    'internal_repo' => string,
    'arcanist_project' => ?string,
  );

  private static function encodeOutput(
    vec<self::TShipItMetadata> $out,
  ): string {
    return \json_encode($out);
  }

  final public static function dumpMetadata(): void {
    $metadatas = vec[];
    $config_objects = FBShipItConfigeratorConfigClasses::getAllConfigs();
    foreach ($config_objects as $config_object) {
      $branch_resolver = new FBShipItBranchResolutionPhase($config_object);
      $repo_metadata = $branch_resolver->getRepoMetadata();
      $branch_configs = $branch_resolver->getBranchConfigs();
      $static_config = $config_object->getStaticConfig();
      foreach ($branch_configs as $branch_config) {
        $base_config = $config_object->getBaseConfig($branch_config);
        $save_config_phase = new ShipItSaveConfigPhase(
          $static_config['githubOrg'],
          $static_config['githubProject'],
        );
        $branch_metadata = $save_config_phase->renderConfig($base_config);
        $is_land_branch = (
          $repo_metadata['land_branch'] === $branch_metadata['source']['branch']
        );
        $metadatas[] = shape(
          'destination' => $branch_metadata['destination'],
          'source' => $branch_metadata['source'],
          'is_land_branch' => $is_land_branch,
          'internal_repo' => $repo_metadata['internal_repo'],
          'arcanist_project' => $repo_metadata['arcanist_project'],
        );
      }
    }
    print(self::encodeOutput($metadatas));
  }
}
