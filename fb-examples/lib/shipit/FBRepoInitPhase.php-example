<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
namespace Facebook\ShipIt;

final class FBRepoInitPhase extends ShipItPhase {
  private bool $allowNuke = false;

  public function __construct(
    private ShipItRepoSide $side,
    private string $name = 'fbcode',
  ) {
    $this->assertIsSourceSide();
  }

  <<__Override>>
  protected function isProjectSpecific(): bool {
    return false;
  }

  private function assertIsSourceSide(): void {
    invariant(
      $this->side === ShipItRepoSide::SOURCE,
      'writing to Facebook repositories is not supported',
    );
  }

  <<__Override>>
  public function getReadableName(): string {
    return 'Initialize '.$this->side.' '.$this->name.' repository';
  }

  <<__Override>>
  public function getCLIArguments(): ImmVector<ShipItCLIArgument> {
    return ImmVector {
      shape(
        'long_name' => 'skip-'.$this->side.'-init',
        'description' => "Don't initialize the repository",
        'write' => $_ ==> $this->skip(),
      ),
      shape( // Removed; specified in code instead.
        'long_name' => $this->side.'-repo::',
      ),
      shape( // Removed; specified in code instead.
        'long_name' => 'src-repo::',
      ),
    };
  }

  <<__Override>>
  public function runImpl(
    ShipItBaseConfig $config,
  ): void {
    $local_path =
      $this->side === ShipItRepoSide::SOURCE
      ? $config->getSourcePath()
      : $config->getDestinationPath();

    $sh_lock = ShipItRepo::createSharedLockForPath($local_path);

    if (\is_dir($local_path)) {
      return;
    }

    $ex_lock = $sh_lock->getExclusive();

    // In case the src repo dir was specified by hand
    if (\basename($local_path) !== $this->name) {
      \fprintf(
        \STDERR,
        'Facebook clone scripts require directory names to match repo names: '.
        "got '%s', expected '%s'\n",
        \basename($local_path),
        $this->name,
      );
      exit(1);
    }

    $command = self::getCloneCommand($this->name);
    $local_parent_path = \dirname($local_path);
    if (!\is_dir($local_parent_path)) {
      \mkdir($local_parent_path, 0755, /* recursive = */ true);
    }
    // Make sure that "remove stale temp file" jobs don't clean this up
    \touch($local_parent_path);

    (new ShipItShellCommand($local_parent_path, ...$command))
      ->setRetries(2)
      ->setFailureHandler(
        $_ ==> (new ShipItShellCommand(
          $local_parent_path,
          'rm',
          '-rf',
          '--preserve-root',
          $local_path,
        ))->runSynchronously()
      )
      ->runSynchronously();
  }

  public static function getCloneCommand(
    string $name,
  ): ImmVector<string> {
    switch ($name) {
      case 'fbsource':
        return ImmVector {
          '/usr/local/bin/hg-clone-fbsource',
          '--no-working-dir',
          '--simple',
        };
      case 'www':
        return ImmVector {
          '/usr/local/bin/hg-clone-www',
          '--no-working-dir',
          '--simple',
        };
      case 'pse-demos':
        return ImmVector {
          '/usr/bin/git',
          'clone',
          'ssh://projects.git-ro.vip.facebook.com/data/gitrepos/pse-demos',
          'pse-demos',
        };
      case 'opsfiles':
        return ImmVector {
          '/usr/local/bin/hg-clone-opsfiles',
          '--no-working-dir',
          '--simple',
        };
      case 'connectivity-lab':
        return ImmVector {
          '/usr/local/bin/hg-clone-connectivity-lab',
          '--no-working-dir',
          '--simple',
        };
      case 'infer-fb':
        return ImmVector {
          '/usr/bin/git',
          'clone',
          'ssh://projects.git-ro.vip.facebook.com/data/gitrepos/infer',
          'infer-fb',
        };
        break;
      case 'buck_internal':
        return ImmVector {
          '/usr/bin/git',
          'clone',
          'ssh://projects.git.vip.facebook.com/data/gitrepos/buck.git',
          'buck_internal',
        };
      case 'llvm-bolt':
        return ImmVector {
          '/usr/bin/git',
          'clone',
          '-b',
          'facebook/bolt',
          'ssh://projects.git-ro.vip.facebook.com/data/gitrepos/llvm/llvm.git',
          'llvm-bolt',
        };
      case 'meta-openbmc':
        return ImmVector {
          '/usr/bin/git',
          'clone',
          '-b',
          'fido',
          'ssh://projects.git-ro.vip.facebook.com/data/gitrepos/yocto/meta-openbmc.git',
          'meta-openbmc',
        };
      case 'meta-terragraph':
        return ImmVector {
          '/usr/bin/git',
          'clone',
          'ssh://projects.git-ro.vip.facebook.com/data/gitrepos/yocto/meta-terragraph.git',
          'meta-terragraph',
        };
      case 'mysql-fb':
        return ImmVector {
          '/usr/bin/git',
          'clone',
          '-b',
          'fb-mysql-5.6.35',
          'ssh://projects.git-ro.vip.facebook.com/data/gitrepos/mysql-5.6.git',
          'mysql-fb',
        };
        break;
      case 'si_sigma':
        return ImmVector {
          '/usr/local/bin/hg-clone-si_sigma',
          '--no-working-dir',
          '--simple',
        };
      case 'phabtest1_git':
        return ImmVector {
          '/usr/bin/git',
          'clone',
          'ssh://projects.git-ro.vip.facebook.com/data/gitrepos/phabtest1_git.git',
          'phabtest1_git',
        };
        break;
      case 'phabtest1_hg':
        return ImmVector {
          '/usr/bin/hg',
          'clone',
          'ssh://hg.vip.facebook.com/data/scm/phabtest1_hg',
          'phabtest1_hg',
        };
        break;
      case 'business-sdk':
        return ImmVector {
          '/usr/bin/git',
          'clone',
          'ssh://git.vip.facebook.com/data/gitrepos/business-sdk.git',
          'business-sdk',
        };
        break;
      case 'facebook-spaces':
        return ImmVector {
          '/usr/bin/git',
          'clone',
          'ssh://projects.git-ro.vip.facebook.com/data/gitrepos/spaces.git',
          'facebook-spaces',
        };
        break;
      case 'fbwin-gameroom':
        return ImmVector {
          '/usr/bin/git',
          'clone',
          'ssh://git.vip.facebook.com/data/gitrepos/fbwin-gameroom.git',
          'fbwin-gameroom',
        };
      case 'WABIZ':
        return ImmVector {
          '/usr/bin/git',
          'clone',
          'ssh://git.vip.facebook.com/data/gitrepos/whatsapp/biz.git',
          'WABIZ',
        };
        break;
    }
    $config = FBRepoCloneCommand::get($name);
    if ($config !== null) {
      return $config;
    }
    invariant_violation(
      "Unsupported repository '%s' - add support in %s::%s()",
      $name,
      __CLASS__,
      __FUNCTION__,
    );
  }
}
