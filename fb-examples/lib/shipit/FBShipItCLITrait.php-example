<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * This file was moved from fbsource to www. View old history in diffusion:
 * https://fburl.com/qbcfel6m
 */
namespace Facebook\ShipIt;

use namespace HH\Lib\Str;
use type Facebook\ShipIt\Config\IShipItConfig;


trait FBShipItCLITrait {

  /** Custom exception handler that repeats the message at the bottom.
   *
   * Some of our scheduling tools report the last line of STDERR; with the
   * default handler, this is something fairly meaningless like '#8 {main}'
   */
  final private static function abortWithException(\Throwable $ex): noreturn {
    $first_line = Str\format(
      "Fatal error: Uncaught exception '%s' with message '%s'",
      \get_class($ex),
      $ex->getMessage(),
    );
    ShipItLogger::err(
      "%s\nStack trace:\n%s\n%s\n",
      $first_line,
      $ex->getTraceAsString(),
      $first_line,
    );
    throw new ShipItExitException(128);
  }

  abstract public static function cliMainAsync(): Awaitable<void>;

  final public static async function cliForBinaryAsync(
    classname<IShipItConfig> $config_class,
  ): Awaitable<void> {
    ShipItLogger::out("--- Starting %s\n", $config_class);
    $config = $config_class::getBaseConfig();
    $runner = new ShipItPhaseRunner($config, $config_class::getPhases());
    self::executeRunner($runner);
  }

  final public static async function cliShipItAsync(
    ?FBShipItConfigeratorConfig $config = null,
    ?string $_external_branch = null,
  ): Awaitable<void> {
    $config_name = $config === null ? '' : $config->getConfigeratorName();
    ShipItLogger::out("--- Starting ShipIt: %s\n", $config_name);
    $runner = new FBShipItProjectRunner(
      FBShipItCLIAction::SHIP_IT,
      $config,
    );
    self::executeRunner($runner);
  }

  final public static async function cliImportItAsync(
    ?FBShipItConfigeratorConfig $config = null,
    ?string $external_branch = null,
  ): Awaitable<void> {
    $config_name = $config === null ? '' : $config->getConfigeratorName();
    ShipItLogger::out("--- Starting ImportIt: %s\n", $config_name);
    $runner = new FBShipItProjectRunner(
      FBShipItCLIAction::IMPORT_IT,
      $config,
      $external_branch,
    );
    self::executeRunner($runner);
  }

  private static function executeRunner(ShipItPhaseRunner $runner): void {
    try {
      $runner->run();
    } catch (ShipItExitException $e) {
      exit($e->exitCode);
    } catch (ShipItShellCommandException $e) {
      $retry_causes = keyset[
        'abort: unknown compression type',
        'abort: abandoned transaction found!',
      ];
      foreach ($retry_causes as $cause) {
        if (Str\search($e->getError(), $cause) !== null) {
          // Recover by restarting; the init phase will detect the bad state
          // fix it by deleting and re-cloning the repo.
          ShipItLogger::err("**** HG: TRANSACTION ABORT (t12066068) ****\n");
          ShipItLogger::err("%s\n", $e->getError());
          ShipItLogger::err("**** RESTARTING ****\n");
          $runner->run();
          return;
        }
      }
      throw $e;
    }
  }
}
