<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
namespace Facebook\ShipIt;

use \Facebook\ImportIt\FBImportItBranchResolutionPhase;
use \Facebook\ShipIt\Config\FBShipItConfigRegistry;

enum FBShipItCLIAction: int {
  SHIP_IT = 0;
  IMPORT_IT = 1;
}

final class FBShipItProjectRunner extends ShipItPhaseRunner {

  public function __construct(
    private FBShipItCLIAction $action,
    private ?classname<FBShipItConfig> $config_class = null,
    private ?string $external_branch = null,
  ) {
    $config =
      new ShipItBaseConfig(\dirname(__DIR__), 'shipit', 'shipit', ImmSet {});
    if ($config_class !== null) {
      parent::__construct(
        $config,
        self::getPhases($action, $config_class, $external_branch),
      );
    } else {
      parent::__construct($config, ImmVector {});
    }
  }

  <<__Override>>
  protected function getBasicCLIArguments(): ImmVector<ShipItCLIArgument> {
    return ImmVector {
      shape(
        'short_name' => 'h',
        'long_name' => 'help',
        'description' => 'show this help message and exit',
      ),
      shape(
        'short_name' => 'v',
        'long_name' => 'verbose',
        'description' => 'Give more verbose output',
        'write' => $x ==> $this->config = $this->config->withVerboseEnabled(),
      ),
      shape(
        'long_name' => 'project::',
        'description' => "The project to run. For project-specific help, use ".
          "--project=project --help.",
        'write' => $x ==> {
          $config_class = self::lookupConfigClass($x);
          $static_config = $config_class::getStaticConfig();
          print (
            '--- Running for '.
            $static_config['githubOrg'].
            '/'.
            $static_config['githubProject'].
            "\n"
          );
          $this->config_class = $config_class;
          $this->phases = self::getPhases(
            $this->action,
            $config_class,
            $this->external_branch,
          );
        },
      ),
    };
  }

  <<TestsBypassVisibility>>
  private static function getPhases(
    FBShipItCLIAction $action,
    classname<FBShipItConfig> $config_class,
    ?string $external_branch,
  ): ImmVector<ShipItPhase> {
    switch ($action) {
      case FBShipItCLIAction::SHIP_IT:
        return ImmVector {
          new FBShipItBranchResolutionPhase($config_class, $external_branch),
        };
      case FBShipItCLIAction::IMPORT_IT:
        return ImmVector {
          new FBImportItBranchResolutionPhase($config_class, $external_branch),
        };
    }
  }

  private static function lookupConfigClass(
    string $name,
  ): classname<FBShipItConfig> {
    // owner/reponame
    $split = \explode('/', $name);
    if (\count($split) === 2) {
      return FBShipItConfigRegistry::getRepoShipItConfig($split[0], $split[1]);
    }
    // reponame OR FacebookReponame
    // Search for a unique match in repo name or class name
    $config_classes = FBShipItConfigRegistry::getShipItConfigClasses();
    $match = null;
    foreach ($config_classes as $config_class) {
      if ($config_class == $name) {
        return $config_class;
      }
      if ($config_class::getStaticConfig()['githubProject'] === $name) {
        invariant(
          $match === null,
          'Multiple projects found with the same repository name! '.
          'Use the fully-clarified name (e.g. facebook/reponame)',
        );
        $match = $config_class;
      }
    }
    invariant(
      $match !== null,
      'Could not find any project that matches %s',
      $name,
    );
    return $match;
  }

  private static function getRawOpts(
    ImmVector<ShipItCLIArgument> $config,
  ): array<string, mixed> {
    return \getopt(
      \implode('', $config->map($opt ==> Shapes::idx($opt, 'short_name', ''))),
      $config->map($opt ==> $opt['long_name']),
    );
  }

  <<__Override>>
  protected function parseCLIArguments(): void {
    $config = $this->getCLIArguments();
    $raw_opts = self::getRawOpts($config);
    $this->parseOptions($config, $raw_opts);
    $non_project_config_names =
      $config->map($cli_arg ==> $cli_arg['long_name'])->toSet();
    $project_config = $this->getCLIArguments()
      ->filter(
        $cli_arg ==>
          !$non_project_config_names->contains($cli_arg['long_name']),
      );
    if ($project_config->count() > 0) {
      $this->parseOptions($project_config, self::getRawOpts($project_config));
    }
    if (
      \array_key_exists('h', $raw_opts) || \array_key_exists('help', $raw_opts)
    ) {
      // hacky coupling with FBShipItBranchResolutionPhase
      // render the project's help message
      if ($this->config_class !== null) {
        foreach ($this->phases as $phase) {
          if ($phase instanceof FBShipItBranchResolutionPhase) {
            $config_class = $phase->getConfigClass();
            $project_runner = $phase::getRunner(
              $config_class,
              $config_class::getBranchConfigs()[0],
            );
            self::printHelp($project_runner->getCLIArguments());
            exit(0);
          }
        }
      }
      self::printHelp($config);
      exit(0);
    }
  }
}
