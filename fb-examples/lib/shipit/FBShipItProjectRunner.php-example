<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * This file was moved from fbsource to www. View old history in diffusion:
 * https://fburl.com/ckijuxbi
 */
namespace Facebook\ShipIt;

use namespace HH\Lib\{C, Str};
use type Facebook\ImportIt\FBImportItBranchResolutionPhase;
use type Facebook\ShipIt\Config\{FBShipItConfigClasses, FBShipItConfigRegistry};

enum FBShipItCLIAction: int {
  SHIP_IT = 0;
  IMPORT_IT = 1;
}

final class FBShipItProjectRunner extends ShipItPhaseRunner {

  // Set this value to force configerator configs to be read directly from a
  // folder on disk, this is primarily used for sandcastle jobs
  private ?string $configeratorDir = null;

  public function __construct(
    private FBShipItCLIAction $action,
    private ?FBShipItConfig $configObject = null,
    private ?string $externalBranch = null,
  ) {
    $config = /* HH_IGNORE_ERROR[2049] __PHPStdLib */
      /* HH_IGNORE_ERROR[4107] __PHPStdLib */
      new ShipItBaseConfig(\dirname(__DIR__), 'shipit', 'shipit', keyset[]);
    if ($configObject !== null) {
      parent::__construct(
        $config,
        self::getPhases($action, $configObject, $externalBranch),
      );
    } else {
      parent::__construct($config, vec[]);
    }
  }

  <<__Override>>
  protected function getBasicCLIArguments(): vec<ShipItCLIArgument> {
    return vec[
      shape(
        'short_name' => 'h',
        'long_name' => 'help',
        'description' => 'show this help message and exit',
      ),
      shape(
        'short_name' => 'v',
        'long_name' => 'verbose',
        'description' => 'Give more verbose output',
        'write' => $_ ==> {
          $this->config = $this->config->withVerboseEnabled();
          ShipItScopedFlock::$verbose = ShipItScopedFlock::DEBUG_EXCLUSIVE;
          return true;
        },
      ),
      shape(
        'long_name' => 'configerator-dir::',
        'description' =>
          'Read configerator configs directly from the given folder',
        'write' => $configerator_dir ==> {
          print(
            '--- Reading configerator configs from '.$configerator_dir."\n"
          );
          $this->configeratorDir = $configerator_dir;
          return true;
        },
      ),
      shape(
        'long_name' => 'project::',
        'description' => "The project to run. For project-specific help, use ".
          "--project=project --help.",
        'write' => $x ==> {
          $config_object = $this->lookupConfigClass($x);
          $static_config = $config_object->getStaticConfig();
          print(
            '--- Running for '.
            $static_config['githubOrg'].
            '/'.
            $static_config['githubProject'].
            "\n"
          );
          $this->configObject = $config_object;
          $this->phases = self::getPhases(
            $this->action,
            $config_object,
            $this->externalBranch,
          );
          return true;
        },
      ),
    ];
  }

  public static function getPhases(
    FBShipItCLIAction $action,
    FBShipItConfig $config_object,
    ?string $external_branch,
  ): vec<ShipItPhase> {
    switch ($action) {
      case FBShipItCLIAction::SHIP_IT:
        return vec[
          new FBShipItBranchResolutionPhase($config_object, $external_branch),
        ];
      case FBShipItCLIAction::IMPORT_IT:
        return vec[
          new FBImportItBranchResolutionPhase($config_object, $external_branch),
        ];
    }
  }

  private function lookupConfigClass(string $name): FBShipItConfig {
    // owner/reponame
    $split = Str\split($name, '/');
    if (C\count($split) === 2) {
      $configerator_config = FBShipItConfigeratorConfigClasses::getConfig(
        $split[0],
        $split[1],
        $this->configeratorDir,
      );
      if ($configerator_config !== null) {
        return $configerator_config;
      }
      return \nullthrows(
        \Facebook\ShipIt\FBShipItConfigeratorConfigClasses::getConfig(
          $split[0],
          $split[1],
        ),
      );
    }
    // reponame OR FacebookReponame
    // Search for a unique match in repo name or class name
    $config_objects = FBShipItConfigeratorConfigClasses::getAllConfigs(
      $this->configeratorDir,
    );
    $match = null;
    foreach ($config_objects as $config_object) {
      if ($config_object->getConfigeratorName() === $name) {
        return $config_object;
      }
      if ($config_object->getStaticConfig()['githubProject'] === $name) {
        invariant(
          $match === null,
          'Multiple projects found with the same repository name! '.
          'Use the fully-clarified name (e.g. facebook/reponame)',
        );
        $match = $config_object;
      }
    }
    invariant(
      $match !== null,
      "Could not find any project that matches %s. \n".
      "  You may have to canary if your config hasn't landed yet.\n",
      $name,
    );
    return $match;
  }

  private static function getRawOpts(
    vec<ShipItCLIArgument> $config,
  ): dict<string, mixed> {
    /* HH_IGNORE_ERROR[2049] __PHPStdLib */
    /* HH_IGNORE_ERROR[4107] __PHPStdLib */
    return \getopt(
      Vec\map($config, $opt ==> Shapes::idx($opt, 'short_name', ''))
        |> Str\join($$, ''),
      Vec\map($config, $opt ==> $opt['long_name']),
    )
      |> dict($$);
  }

  <<__Override>>
  protected function parseCLIArguments(): void {
    $config = $this->getCLIArguments();
    $raw_opts = self::getRawOpts($config);
    $this->parseOptions($config, $raw_opts);
    $non_project_config_names = Keyset\map(
      $config,
      $cli_arg ==> $cli_arg['long_name'],
    );
    $project_config = Vec\filter(
      $this->getCLIArguments(),
      $cli_arg ==>
        !C\contains($non_project_config_names, $cli_arg['long_name']),
    );
    if (!C\is_empty($project_config)) {
      $this->parseOptions($project_config, self::getRawOpts($project_config));
    }
    if (
      C\contains_key($raw_opts, 'h') || C\contains_key($raw_opts, 'help')
    ) {
      // hacky coupling with FBShipItBranchResolutionPhase
      // render the project's help message
      if ($this->configObject !== null) {
        foreach ($this->phases as $phase) {
          if ($phase is FBShipItBranchResolutionPhase) {
            $config_object = $phase->getConfigObject();
            $project_runner = $phase::getRunner(
              $config_object,
              $config_object->getBranchConfigs()[0],
            );
            self::printHelp($project_runner->getCLIArguments());
            exit(0);
          }
        }
      }
      self::printHelp($config);
      exit(0);
    }
  }
}
