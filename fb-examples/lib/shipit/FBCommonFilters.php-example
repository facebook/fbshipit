<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
namespace Facebook\ShipIt;

final class FBCommonFilters {

  const NOT_A_TEST_PLAN = 'Imported from GitHub, without a `Test Plan:` line.';

  public static function applyAll(
    ShipItChangeset $changeset,
    shape(
      ?'stripCommonFiles/exceptions' => ImmVector<string>,
      ?'filterMessageSections/keepFields' => ImmSet<string>,
    ) $config = shape(),
  ): ShipItChangeset {
    return $changeset
      |> self::skipIfAlreadyOnGitHub($$)
      |> self::stripCommonFiles(
        $$,
        $config['stripCommonFiles/exceptions'] ?? ImmVector {},
      )
      |> self::stripSubjectMergePrefix($$)
      |> self::stripSubjectTags($$)
      |> self::stripEmptyTestPlans($$)
      |> self::stripCommands($$)
      |> self::stripAccept2Ship($$)
      |> self::referencePullRequestNumber($$)
      |> self::stripSevRevertSummary($$)
      |> self::delinkifyDifferentialURLs($$)
      |> self::restoreGitHubAuthor($$)
      |> ShipItUserFilters::rewriteSVNAuthor($$, FBToGitHubUserInfo::class)
      |> self::filterMessageSections(
        $$,
        $config['filterMessageSections/keepFields'] ??
          self::getDefaultMessageSectionNames(),
      )
      |> self::rewriteMentions($$)
      |> self::rewriteReviewers($$)
      |> self::rewriteAuthor($$);
  }

  public static function stripSummariesByDefault(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    $mentions = ShipItMentions::getMentions($changeset);
    if ($mentions->contains('@public')) {
      return ShipItMentions::rewriteMentions(
        $changeset,
        $mention ==> $mention === '@public' ? '' : $mention,
      );
    }

    if ($mentions->contains('@already-on-github')) {
      return $changeset;
    }

    $sections = ShipItMessageSections::getSections(
      $changeset,
      self::getSupportedMessageSectionNames(),
    );

    if ($sections->containsKey('github author')) {
      return $changeset;
    }

    $sections->removeKey('summary');

    return $changeset->withMessage(
      ShipItMessageSections::buildMessage($sections->toImmMap()),
    );
  }

  ////////////////////////////////////////////
  ///// most users can stop reading here /////
  ////////////////////////////////////////////

  public static function rewriteAuthor(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    return ShipItUserFilters::rewriteAuthorWithUserPattern(
      $changeset,
      FBToGitHubUserInfo::class,
      '/<(?<user>[^<]+)@fb.com>$/',
    );
  }

  public static function skipIfAlreadyOnGitHub(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    if (ShipItMentions::containsMention($changeset, '@already-on-github')) {
      $changeset = $changeset
        ->withDiffs(ImmVector {})
        ->withDebugMessage('SKIP COMMIT: @already-on-github');
      invariant(!$changeset->isValid(), '@already-on-github diff still valid');
    }
    return $changeset;
  }

  public static function stripCommonFiles(
    ShipItChangeset $changeset,
    ImmVector<string> $exception_patterns = ImmVector {},
  ): ShipItChangeset {
    return ShipItPathFilters::stripPaths(
      $changeset,
      ImmVector {
        '@^([^/]+/)*(?:(?!com/)([^/]+/))facebook(/|$)@',
        '@^facebook[/|$]@',
        '@(^|/)\.patternlint(/|$)@',
        '@(^|/)fb[-_]?only(/|$)@',
        '@(^|/)fb(/|$)@',
        '@/AUTODEPS$@',
        '@/TARGETS$@',
        '@/PLATFORM$@',
        '@/\.hgsparse(-\w+)?$@',
        '@/BUCK$@', /** MOBILE DEVELOPERS: HERE BE DANGER **/
        '@/FBBUILD_CONFIG$@',
        '@/BUILD_MODE$@',
        '@\.bzl$@i',
        '@\.mk$@',
        '@pull_request_metadata_DO_NOT_COMMIT_THIS_FILE_OR_YOU_WILL_BE_FIRED\.json@',
      },
      $exception_patterns->concat(ImmVector {
        // Various Facebook projects depend on this project hashes to update
        // submodules in GitHub.
        '@^fbcode/opensource/project_hashes/.*$@',
      }),
    );
  }

  const CLOSES_PR_REGEX =
    '@^(?:Closes|Pull Request resolved:) https://github.com/.+/.+/pull/([0-9]+)@im';
  public static function referencePullRequestNumber(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    $matches = array();
    if (
      \preg_match(
        self::CLOSES_PR_REGEX,
        $changeset->getMessage(),
        &$matches,
      ) !==
        1
    ) {
      return $changeset;
    }
    return $changeset->withSubject(
      $changeset->getSubject().\sprintf(' (#%d)', $matches[1]),
    );
  }

  public static function delinkifyDifferentialURLs(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    return $changeset->withMessage(
      \preg_replace(
        '@https?://phabricator\.[^/]+/@i',
        '',
        $changeset->getMessage(),
      ),
    );
  }

  /*
   * Strip the auto-generated Test Plan by ImportIt
   */
  public static function stripEmptyTestPlans(
    ShipItChangeset $changeset,
  ): ShipItChangeset {

    $sections = ShipItMessageSections::getSections(
      $changeset,
      self::getSupportedMessageSectionNames(),
    );

    // If No test plan, remove "test plan" from Summary
    if (($sections['test plan'] ?? null) === self::NOT_A_TEST_PLAN) {
      $sections->removeKey('test plan');
    }

    return $changeset->withMessage(
      ShipItMessageSections::buildMessage($sections->toImmMap()),
    );
  }

  public static function stripSubjectMergePrefix(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    // remove junk added when merging that looks like:
    //
    //   unixname merging SHA1 | unixname | ...
    //
    return $changeset->withSubject(
      \preg_replace(
        '/^\w+ merging \w+ \| \w+ \| /',
        '',
        $changeset->getSubject(),
      ),
    );
  }

  public static function stripSubjectTags(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    // strip tags like [hack] from the front of the subject. historically,
    // this happened automatically when ShipItRepoGIT called `git am` without
    // `-b`, so this is just maintaining that behavior since they sometimes
    // contain codenames.
    return $changeset->withSubject(
      \preg_replace('/^(?:\[[^\]]+\]\s*)+/', '', $changeset->getSubject()),
    );
  }

  public static function stripCommands(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    return $changeset->withMessage(
      \preg_replace(
        '/(@override-unit-failures)|(@build\[.*\])/',
        '',
        $changeset->getMessage(),
      ),
    );
  }

  public static function stripAccept2Ship(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    return $changeset->withMessage(
      \preg_replace("/#accept2ship\n?/", '', $changeset->getMessage()),
    );
  }

  public static function stripSevRevertSummary(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    if (
      !\preg_match('/This reverts commit/', $changeset->getMessage()) ||
      !\preg_match('/cause_a_sev_many_files/', $changeset->getMessage())
    ) {
      return $changeset;
    }
    $sections = ShipItMessageSections::getSections(
      $changeset,
      self::getSupportedMessageSectionNames(),
    );
    $sections->removeKey('summary');
    return $changeset->withMessage(
      ShipItMessageSections::buildMessage($sections->toImmMap()),
    );
  }

  public static function getDefaultMessageSectionNames(): ImmSet<string> {
    return ImmSet {
      'summary',
      'reviewed by',
      'differential revision',
      'pulled by',
    };
  }

  public static function getSupportedMessageSectionNames(): ImmSet<string> {
    return ImmSet {
      'summary',
      'facebook',
      'github author',
      'github pr sync',
      'test plan',
      'reviewers',
      'reviewed by',
      'cc',
      'differential revision',
      'blame revision',
      'tags',
      'task id',
      'tasks',
      'subscribers',
      'signature',
      'committer',
      'pulled by',
    };
  }

  public static function filterMessageSections(
    ShipItChangeset $changeset,
    ImmSet<string> $keep = self::getDefaultMessageSectionNames(),
  ): ShipItChangeset {
    $sections = ShipItMessageSections::getSections(
      $changeset,
      self::getSupportedMessageSectionNames(),
    )->filterWithKey(($k, $_) ==> $keep->contains($k));
    return $changeset->withMessage(
      ShipItMessageSections::buildMessage($sections->toImmMap()),
    );
  }

  public static function rewriteMentions(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    $changeset = self::rewriteFBMentions($changeset);
    $changeset =
      ShipItUserFilters::rewriteMentions($changeset, FBToGitHubUserInfo::class);
    $changeset = ShipItMentions::rewriteMentionsWithoutAt(
      $changeset,
      /* exceptions = */ ImmSet {
        '@override-unit-failures',
        '@already-on-github',
        '@public',
      },
    );
    return $changeset;
  }

  public static function rewriteFBMentions(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    $message = \preg_replace_callback(
      // @[123:Name]
      '/@\[(\d+):([^\]]+)\]/',
      $matches ==> $matches[2],
      $changeset->getMessage(),
    );
    return $changeset->withMessage($message);
  }

  private static function isBotUser(string $user): bool {
    return (
      ImmSet {
        'androidtrunkagent',
        'svcscm',
      }
    )->contains($user);
  }

  public static function restoreGitHubAuthor(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    if (!\preg_match('/^Github author:/mi', $changeset->getMessage())) {
      return $changeset;
    }

    $pulled_by_unixname = null;
    $matches = [];
    if (
      \preg_match(
        '/<(?<author>[^@]*)@fb\.com>/',
        $changeset->getAuthor(),
        &$matches,
      ) &&
      !self::isBotUser($matches['author'])
    ) {
      $pulled_by_unixname = $matches['author'];
    } else {
      $sections = ShipItMessageSections::getSections(
        $changeset,
        self::getSupportedMessageSectionNames(),
      );
      if ($sections->containsKey('reviewed by')) {
        $names = (new Vector(\explode(', ', $sections['reviewed by'])));
        if (\count($names) === 1) {
          $pulled_by_unixname = $names[0];
        }
      }
    }

    if ($pulled_by_unixname !== null) {
      $pulled_by = \HH\Asio\join(
        FBToGitHubUserInfo::getDestinationUserFromLocalUser(
          $pulled_by_unixname,
        ),
      );

      $changeset = $changeset->withMessage(
        $changeset->getMessage()."\n\nPulled By: ".$pulled_by,
      );
    }

    return ShipItUserFilters::rewriteAuthorFromGitHubAuthorLine($changeset);
  }

  public static function rewriteReviewers(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    $sections = ShipItMessageSections::getSections(
      $changeset,
      self::getSupportedMessageSectionNames(),
    );
    if (!$sections->containsKey('reviewed by')) {
      return $changeset;
    }
    $names = (new Vector(\explode(', ', $sections['reviewed by'])))
      // No project reviewers e.g., #WDT in D2407623
      ->filter($name ==> \substr(\trim($name), 0, 1) !== '#')
      ->map(
        async $name ==>
          await FBToGitHubUserInfo::getDestinationUserFromLocalUser($name),
      );
    $names = \HH\Asio\join(\HH\Asio\v($names))->filter($x ==> \strlen($x) > 0);
    $sections['reviewed by'] = \implode(', ', $names);
    return $changeset->withMessage(
      ShipItMessageSections::buildMessage($sections->toImmMap()),
    );
  }
}
