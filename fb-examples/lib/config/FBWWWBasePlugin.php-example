<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * This file was moved from fbsource to www. View old history in diffusion:
 * https://fburl.com/p29s1kug
 */
namespace Facebook\ShipIt\Config;

use namespace HH\Lib\{Regex, Str};
use type Facebook\ShipIt\{
  FBSourceBranchConfig,
  FBShipItConfigeratorConfig,
  GetPathMappingsFn,
  ShipItChangeset,
  ShipItConditionalLinesFilter,
  ShipItPathFilters,
};

abstract class FBWWWBasePlugin extends FBShipItConfigeratorConfig {
  <<__Override>>
  public function defaultProjectFilterChangeset(
    ShipItChangeset $changeset,
    GetPathMappingsFn $get_path_mappings,
  ): ShipItChangeset {
    return parent::defaultProjectFilterChangeset($changeset, $get_path_mappings)
      |> ShipItPathFilters::rewritePaths(
        $$,
        /* HH_IGNORE_ERROR[2049] __PHPStdLib */
        /* HH_IGNORE_ERROR[4107] __PHPStdLib */
        $path ==> \preg_replace('@^src/(.+/)?__tests__/@', 'tests/\1', $path),
      )
      |> self::renameGenToAsync($$);
  }

  final public static function renameGenToAsync(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    return self::renameFunctions(
      $changeset,
      $name ==> {
        if ($name === 'gen') {
          return 'from_async';
        }
        if ($name === 'testGen') {
          return 'testFromAsync';
        }
        if (Str\search($name, 'gen_') === 0) {
          // function
          return Str\slice($name, 4).'_async';
        }
        if (Regex\matches($name, re"/^gen[A-Z]/")) {
          // checking for [A-Z] so we don't output things like "erate{...}Async"
          $name = Str\slice($name, 3);
          $name[0] = Str\lowercase($name[0]);
          return $name.'Async';
        }
        if (Str\search($name, 'testGen') === 0) {
          return 'test'.Str\slice($name, 7).'Async';
        }
        return $name;
      },
    );
  }

  final private static function renameFunctions(
    ShipItChangeset $changeset,
    (function(string): string) $renamer,
  ): ShipItChangeset {
    $diffs = vec[];
    foreach ($changeset->getDiffs() as $diff) {
      $diff['body'] = $diff['body']
        /* HH_IGNORE_ERROR[2049] __PHPStdLib */
        /* HH_IGNORE_ERROR[4107] __PHPStdLib */
        |> \explode("\n", $$)
        |> (new ImmVector($$))->map(
          $line ==> {
            $_count = null;
            /* HH_IGNORE_ERROR[2049] __PHPStdLib */
            /* HH_IGNORE_ERROR[4107] __PHPStdLib */
            $result = \preg_replace_callback(
              // Comma and dot for doc comments
              '/(function |\\\\|\\|>| |->|::)([a-zA-Z0-9_]+)(\\(|<|,|\\.)/',
              $matches ==> $matches[1].$renamer($matches[2]).$matches[3],
              $line,
              -1,
              inout $_count,
            );
            return $result;
          },
        )
        |> Str\join($$, "\n");
      $diffs[] = $diff;
    }
    return $changeset->withDiffs($diffs);
  }

  final public static function renameAsyncToGen(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    return self::renameFunctions(
      $changeset,
      $name ==> {
        if (Str\slice($name, 0, 2) === '__') {
          return $name;
        }
        if ($name === 'from_async') {
          return 'gen';
        }
        if ($name === 'testFromAsync') {
          return 'testGen';
        }
        if (Str\length($name) > 6 && Str\slice($name, -6) === '_async') {
          return 'gen_'.Str\slice($name, 0, Str\length($name) - 6);
        }
        if (
          Str\length($name) > 5 &&
          Str\slice($name, 0, 4) === 'test' &&
          Str\slice($name, -5) === 'Async'
        ) {
          return 'testGen'.Str\slice($name, 4, Str\length($name) - 9);
        }
        if (Str\length($name) > 5 && Str\slice($name, -5) === 'Async') {
          $name = Str\slice($name, 0, Str\length($name) - 5);
          $name[0] = Str\uppercase($name[0]);
          return 'gen'.$name;
        }
        return $name;
      },
    );
  }

  <<__Override>>
  public function projectImportChangeset(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $branch_config,
  ): ShipItChangeset {
    return $changeset
      |> ShipItPathFilters::rewritePaths(
        $$,
        /* HH_IGNORE_ERROR[2049] __PHPStdLib */
        /* HH_IGNORE_ERROR[4107] __PHPStdLib */
        $path ==> \preg_replace('@^tests/(.+/)?@', 'src/\1__tests__/', $path),
      )
      |> self::renameAsyncToGen($$)
      |> parent::projectImportChangeset($$, $branch_config);
  }

  <<__Override>>
  public function getCommentMarker(): ?string {
    return '//';
  }
}
