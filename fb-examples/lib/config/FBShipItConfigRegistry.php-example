<?hh //strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
namespace Facebook\ShipIt\Config;

use \Facebook\ShipIt\ {
  FBShipItConfig,
  ShipItGenerateConfigStubsPhase,
};

final class FBShipItConfigRegistry {

    private static ?ImmSet<classname<FBShipItConfig>>
      $config_classes = null;

    private static function makeCamelCase(string $name): string {
      return $name
        |> \preg_replace_callback(
          '/[-_\.]([a-zA-Z0-9])/',
          $matches ==> \strtoupper($matches[1]),
          $$,
        )
        |> \ucfirst($$);
    }

    /**
     * 'facebook/fbshipit' => 'Facebook\ShipIt\Config\FacebookFbshipit'
     */
    final public static function getClassName(
      string $org,
      string $repo,
      bool $include_namespace = false,
    ): classname<FBShipItConfig> {
      invariant(\strlen($org) > 0, 'Org cannot be empty');
      invariant(\strlen($repo) > 0, 'Repo cannot be empty');
      $prefix = '';
      if ($include_namespace) {
        $prefix = 'Facebook\\ShipIt\\Config\\';
      }
      /* HH_IGNORE_ERROR[4110]: dynamic classname generation */
      return $prefix.
        self::makeCamelCase(\strtolower($org)).
        self::makeCamelCase(\strtolower($repo));
    }

    public static function loadConfigClasses(
    ): ImmSet<classname<FBShipItConfig>> {
      $config_classes = Set {};
      // TODO use hhvm-autoload and parse from the autoload map
      // instead of walking the filetree
      $shipit_root = __DIR__.'../../../..';
      $directory = new \RecursiveDirectoryIterator($shipit_root.'/config/');
      $iterator = new \RecursiveIteratorIterator($directory);
      $regex = new \RegexIterator(
        $iterator,
        '@^.+\.php$@i',
        \RecursiveRegexIterator::GET_MATCH
      );
      foreach(\array_keys(\iterator_to_array($regex)) as $filename) {
        $class_name = self::getClassName(
          \basename(\dirname($filename)),
          \basename($filename, '.php'),
          /* include_namespace */ true,
        );
        $config_classes[] = $class_name;
      }
      return new ImmSet($config_classes);
    }

    public static function getShipItConfigClasses(
    ): ImmSet<classname<FBShipItConfig>> {
      if (self::$config_classes === null) {
        self::$config_classes = self::loadConfigClasses();
      }
      return self::$config_classes;
    }

    public static function getRepoShipItConfig(
      string $org,
      string $repo,
    ): classname<FBShipItConfig> {
      $config_classes = self::$config_classes;
      if ($config_classes === null) {
        $config_classes = self::loadConfigClasses();
        self::$config_classes = $config_classes;
      }
      $class_name = self::getClassName(
        $org,
        $repo,
        /* include_namespace */ true,
      );
      invariant(
        $config_classes->contains($class_name),
        'Unknown repo: %s/%s',
        $org,
        $repo,
      );
      invariant(
        \class_exists($class_name),
        'ShipItConfigRegistry error -- invalid classname: %s',
        $class_name,
      );
      return $class_name;
    }
}
