<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * This file was moved from fbsource to www. View old history in diffusion:
 * https://fburl.com/2w7l7q2r
 */
namespace Facebook\ShipIt;

use namespace HH\Lib\{Str, C, Vec};
use type Facebook\ImportIt\{
  ImportItPathFilters,
  ImportItSubmoduleFilter,
  ImportItSyncPhase,
};

type GetPathMappingsFn = (function(): dict<string, string>);

type FBSourceBranchConfig = shape(
  'internal' => string,
  'external' => string,
  ?'projectFilterChangeset' => (function(
    ShipItChangeset,
    GetPathMappingsFn,
  ): ShipItChangeset),
  ?'getPathMappings' => GetPathMappingsFn,
);

/** Base class for projects that have no special requirements.
 *
 * If you need more flexibility than this provides, use the classes
 * directly (eg shipit_hhvm.php and shipit_buck.php)
 */
<<__ConsistentConstruct>>
abstract class FBShipItConfig {
  // Do not update submodules twice in a row in a 24-hour period.
  const int UPDATE_SUBMODULE_FREQUENCY = 60 * 60 * 24;
  const string UPDATE_SUBMODULE_AUTHOR = 'svcscm <svcscm@fb.com>';
  const string UPDATE_SUBMODULE_SUBJECT = 'Updating submodules';

  private function __construct() {}

  public static function getInstance(): this {
    return new static();
  }

  public abstract function getStaticConfig(): FBShipItCLIStaticConfig;

  public abstract function getDefaultPathMappings(): dict<string, string>;

  public function defaultProjectFilterChangeset(
    ShipItChangeset $changeset,
    GetPathMappingsFn $get_path_mappings,
  ): ShipItChangeset {
    $standard_filters = $changeset
      |> FBCommonFilters::applyAll(
        $$,
        shape(
          'stripCommonFiles/exceptions' =>
            $this->getStripCommonFileExceptions(),
        ),
      )
      |> ShipItPathFilters::stripPaths(
        $$,
        $this->getDefaultStrippedFiles(),
        $this->getDefaultStrippedFileExceptions(),
      )
      |> ShipItPathFilters::moveDirectories($$, $get_path_mappings());

    $marker = $this->getCommentMarker();
    if ($marker === null) {
      return $standard_filters;
    }

    return $standard_filters
      |> ShipItConditionalLinesFilter::commentLines(
        $$,
        $this->getCommentLine(),
        $marker,
      )
      |> ShipItConditionalLinesFilter::uncommentLines(
        $$,
        $this->getUncommentLine(),
        $marker,
      );
  }

  /*
   * Override to return a vector of regular expression strings that match
   * whitelisted files or directories that will not be stripped, even if
   * they have names that would normally exclude them.
   * Example: '@^facebook[/|$]@' to whitelist files inside facebook/
   * directories.
   */
  public function getStripCommonFileExceptions(): vec<string> {
    return vec[];
  }

  /*
   * Blacklist of regular expression strings that match project files which
   * should be stripped out of published commits.
   */
  public function getDefaultStrippedFiles(): vec<string> {
    return vec[];
  }

  /*
   * Whitelist of regular expression strings that match project files which
   * should not be stripped, even if they match the above project-specific
   * blacklist.
   */
  public function getDefaultStrippedFileExceptions(): vec<string> {
    return vec[];
  }

  /**
   * Whether to use fb prefix in commit markers.
   */
  public function hasCommitMarkerPrefix(): bool {
    return true;
  }

  // Public so that you can add a unit test
  final public function filterChangeset(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $branch_config,
    bool $use_confidential_filter = true,
  ): ShipItChangeset {
    $changeset = $changeset
      |> $this->stripExceptSourceRoots($$, $branch_config)
      |> $this->filterSubmodules($$)
      |> (
        $this->getProjectFilterChangesetFn($branch_config)
      )($$, $this->getPathMappingsFn($branch_config));
    if ($use_confidential_filter) {
      $changeset = FBConfidentialFilter::applyAll($changeset);
    }
    return $changeset;
  }

  public function getSubmoduleMappings(): dict<string, string> {
    return dict[];
  }

  private function getSourceRoots(
    FBSourceBranchConfig $branch_config,
  ): keyset<string> {
    $config = $this->getStaticConfig();
    $paths = Keyset\keys(($this->getPathMappingsFn($branch_config))());
    /* HH_IGNORE_ERROR[2049] __PHPStdLib */
    /* HH_IGNORE_ERROR[4107] __PHPStdLib */
    $interfaces = new Set(\class_implements(static::class));
    if (
      !$interfaces->contains(ISupportsFBCodeBuilder::class) &&
      $config['internalRepo'] === 'fbsource' &&
      !C\is_empty($this->getSubmoduleMappings())
    ) {
      // Add the default project hashes folder.  This is stripped after we add
      // any submodules.
      $paths[] = 'fbcode/opensource/project_hashes/';
    }

    if (C\contains($paths, '')) {
      // All paths are included.
      return keyset[];
    }
    // Sort least specific to most specific.
    $paths = Vec\sort($paths);
    $roots = keyset[];
    foreach ($paths as $path) {
      // If this path starts with any elements in the set of roots we have
      // already computed, we do not need to add this as it would be redundant.
      $root_match = false;
      foreach ($roots as $root) {
        /* HH_IGNORE_ERROR[2049] __PHPStdLib */
        /* HH_IGNORE_ERROR[4107] __PHPStdLib */
        $root_match = $root_match || \strncmp($path, $root, Str\length($root)) === 0;
      }
      if ($root_match) {
        continue;
      }
      $roots[] = $path;
    }
    return $roots;
  }

  public function getBaseConfig(
    FBSourceBranchConfig $branch_config,
  ): ShipItBaseConfig {
    $static_config = $this->getStaticConfig();
    return (
      new ShipItBaseConfig(
        '/var/tmp/fbshipit',
        /* source_dir = */ $static_config['internalRepo'],
        Shapes::idx(
          $static_config,
          'destDirName',
          $static_config['githubProject'],
        ),
        $this->getSourceRoots($branch_config),
      )
    )
      ->withSourceBranch($branch_config['internal'])
      ->withDestinationBranch($branch_config['external'])
      ->withCommitMarkerPrefix(true);
  }

  final protected function stripExceptSourceRoots(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $branch_config,
  ): ShipItChangeset {
    $roots = Keyset\filter(
      $this->getBaseConfig($branch_config)->getSourceRoots(),
      $root ==> $root !== '',
    );
    if (C\is_empty($roots)) {
      return $changeset;
    }

    return ShipItPathFilters::stripExceptDirectories($changeset, $roots);
  }

  final protected function filterSubmodules(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    foreach ($this->getSubmoduleMappings() as $source => $dest) {
      $changeset = ShipItSubmoduleFilter::useSubmoduleCommitFromTextFile(
        $changeset,
        $source,
        $dest,
      );
    }
    if (!\killswitch_intern(\KS::OPENSOURCE_SHIPIT_SUBMODULES)) {
      // Find other submodules outside the explicitly defined mappings.
      foreach ($changeset->getDiffs() as $diff) {
        if (ShipItSubmoduleFilter::isSubmoduleTXTDiff($diff)) {
          $changeset = ShipItSubmoduleFilter::useSubmoduleCommitFromTextFile(
            $changeset,
            $diff['path'],
            Str\split($diff['path'], '.submodule.txt')[0],
          );
        }
      }
    }

    /* HH_IGNORE_ERROR[2049] __PHPStdLib */
    /* HH_IGNORE_ERROR[4107] __PHPStdLib */
    $interfaces = new Set(\class_implements(static::class));
    if ($interfaces->contains(ISupportsFBCodeBuilder::class)) {
      // FBCodeBuilder needs these hashes, but doesn't use them as submodules.
      return $changeset;
    }
    return ShipItPathFilters::stripPaths(
      $changeset,
      vec[
        '@^fbcode/opensource/project_hashes/@',
      ],
      vec[
        '@^fbcode/opensource/project_hashes/shipit_test_file.txt$@',
      ],
    );
  }

  public function getPhases(
    FBSourceBranchConfig $branch_config,
  ): vec<ShipItPhase> {
    $static_config = $this->getStaticConfig();
    return vec[
      new ShipItFilterSanityCheckPhase(
        $changeset ==> $this->filterChangeset($changeset, $branch_config),
      ),
      new ShipItSaveConfigPhase(
        $static_config['githubOrg'],
        $static_config['githubProject'],
      ),
      new ShipItDeleteCorruptedRepoPhase(ShipItRepoSide::SOURCE),
      new ShipItDeleteCorruptedRepoPhase(ShipItRepoSide::DESTINATION),
      new FBRepoInitPhase(
        ShipItRepoSide::SOURCE,
        $static_config['internalRepo'],
      ),
      // Clean prior to pulling to remove any untracked files at the current
      // revision that may conflict with updates.
      new ShipItCleanPhase(ShipItRepoSide::SOURCE),
      new ShipItPullPhase(ShipItRepoSide::SOURCE),
      new ShipItCreateNewRepoPhase(
        $changeset ==> $this->filterChangeset($changeset, $branch_config),
        shape(
          'name' => 'facebook-github-bot',
          'email' => 'facebook-github-bot@users.noreply.github.com',
        ),
      ),
      new ShipItGitHubInitPhase(
        $static_config['githubOrg'],
        $static_config['githubProject'],
        ShipItRepoSide::DESTINATION,
        ShipItTransport::HTTPS,
        FBGitHubUtils::class,
      ),
      // Clean prior to pulling to remove any untracked files at the current
      // revision that may conflict with updates.
      new ShipItCleanPhase(ShipItRepoSide::DESTINATION),
      new ShipItPullPhase(ShipItRepoSide::DESTINATION),
      new ShipItSyncPhase(
        ($_config, $changeset) ==>
          $this->filterChangeset($changeset, $branch_config),
        keyset[],
        ($changesets, $dest) ==>
          $this->postFilterChangesets($changesets, $dest),
        Shapes::idx($static_config, 'allow-empty-commit', false),
      ),
      new ShipItVerifyRepoPhase(
        $changeset ==> $this->filterChangeset(
          $changeset,
          $branch_config,
          /* skip confidential filter b/c commits are not published */ false,
        ),
      ),
      new ShipItPushLfsPhase(
        ShipItRepoSide::DESTINATION,
        $static_config['githubOrg'],
        $static_config['githubProject'],
        Shapes::idx($static_config, 'gitLfs', false),
        FBGitHubUtils::class,
      ),
      new ShipItPushPhase(),
    ];
  }

  //////////////////////////
  //
  // ImportIt Config logic
  //
  //////////////////////////

  /**
   * By default, ImportIt will just update paths.  If a project wants to do
   * something more complicated, they can override this method.
   */
  public function projectImportChangeset(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $branch_config,
  ): ShipItChangeset {
    $standard_filters = $changeset
      |> $this->filterImportSubmodules($$)
      |> ImportItPathFilters::moveDirectories(
        $$,
        ($this->getPathMappingsFn($branch_config))(),
        Vec\keys($this->getSubmoduleMappings())
          |> Vec\map($$, $path ==> '@^'.$path.'$@'),
      );

    $marker = $this->getCommentMarker();
    if ($marker === null) {
      return $standard_filters;
    }

    return $standard_filters
      |> ShipItConditionalLinesFilter::uncommentLines(
        $$,
        $this->getCommentLine(),
        $marker,
      )
      |> ShipItConditionalLinesFilter::commentLines(
        $$,
        $this->getUncommentLine(),
        $marker,
      );
  }

  // Public so that you can add a unit test
  final public function importChangeset(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $branch_config,
  ): ShipItChangeset {
    return $this->projectImportChangeset($changeset, $branch_config);
  }

  final public function getImportBaseConfig(
    FBSourceBranchConfig $branch_config,
  ): ShipItBaseConfig {
    $static_config = $this->getStaticConfig();
    $shipit_base_config = $this->getBaseConfig($branch_config);
    return (
      new ShipItBaseConfig(
        /* base_dir = */ '/var/tmp/fbimportit',
        /* source_dir */ Shapes::idx(
          $static_config,
          'destDirName',
          $static_config['githubProject'],
        ),
        /* dest_dir = */ $static_config['internalRepo'],
        // We assume the entire GitHub repository is being imported.
        /* source_roots = */ keyset[],
      )
    )
      ->withSourceBranch($shipit_base_config->getDestinationBranch())
      ->withDestinationBranch($shipit_base_config->getSourceBranch())
      ->withCommitMarkerPrefix(true);
  }

  final protected function filterImportSubmodules(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    foreach ($this->getSubmoduleMappings() as $dest => $source) {
      $changeset = ImportItSubmoduleFilter::moveSubmoduleCommitToTextFile(
        $changeset,
        $source,
        $dest,
      );
    }
    // If syncing to an hg monorepo, find other submodules outside the
    // explicitly defined mappings.
    if (
      !\killswitch_intern(\KS::OPENSOURCE_SHIPIT_SUBMODULES) &&
      FBRepoInitPhase::isMonorepo($this->getStaticConfig()['internalRepo'])
    ) {
      foreach ($changeset->getDiffs() as $diff) {
        if (ShipItSubmoduleFilter::isSubmoduleDiff($diff)) {
          $changeset = ImportItSubmoduleFilter::moveSubmoduleCommitToTextFile(
            $changeset,
            $diff['path'],
            $diff['path'].'.submodule.txt',
          );
        }
      }
    }
    return $changeset;
  }

  final public function getImportPhases(
    FBSourceBranchConfig $branch_config,
  ): vec<\Facebook\ShipIt\ShipItPhase> {
    $static_config = $this->getStaticConfig();
    return vec[
      new ShipItDeleteCorruptedRepoPhase(ShipItRepoSide::SOURCE),
      new ShipItDeleteCorruptedRepoPhase(ShipItRepoSide::DESTINATION),
      new \Facebook\ShipIt\ShipItGitHubInitPhase(
        $static_config['githubOrg'],
        $static_config['githubProject'],
        ShipItRepoSide::SOURCE,
        ShipItTransport::HTTPS,
        FBGitHubUtils::class,
      ),
      // Clean prior to pulling to remove any untracked files at the current
      // revision that may conflict with updates.
      new ShipItCleanPhase(ShipItRepoSide::SOURCE),
      new ShipItPullPhase(ShipItRepoSide::SOURCE),
      new \Facebook\ImportIt\FBRepoInitPhase(
        ShipItRepoSide::DESTINATION,
        $static_config['internalRepo'],
      ),
      // Clean prior to pulling to remove any untracked files at the current
      // revision that may conflict with updates.
      new ShipItCleanPhase(ShipItRepoSide::DESTINATION),
      new ShipItPullPhase(ShipItRepoSide::DESTINATION),
      new ImportItSyncPhase(
        $changeset ==> $this->importChangeset($changeset, $branch_config),
      ),
    ];
  }

  /**
   * Maps source branches to destination branches.
   * Note: while a single source branch can map to multiple destination
   * branches, you cannot map multiple source branches to one destination
   * branch.
   *
   * If you need to override shipit logic for certain branches,
   * pass override functions into the shape.
   */
  public function getBranchConfigs(): vec<FBSourceBranchConfig> {
    return vec[
      shape(
        'internal' => 'master',
        'external' => 'master',
      ),
    ];
  }

  /**
   * Uses default function implementation if no override is provided.
   */
  private function getProjectFilterChangesetFn(
    FBSourceBranchConfig $branch_config,
  ): (function(ShipItChangeset, GetPathMappingsFn): ShipItChangeset) {
    return Shapes::idx(
      $branch_config,
      'projectFilterChangeset',
      ($changeset, $get_path_mappings) ==>
        $this->defaultProjectFilterChangeset($changeset, $get_path_mappings),
    );
  }

  /**
   * Uses default function implementation if no override is provided.
   */
  final protected function getPathMappingsFn(
    FBSourceBranchConfig $branch_config,
  ): GetPathMappingsFn {
    return Shapes::idx(
      $branch_config,
      'getPathMappings',
      () ==> $this->getDefaultPathMappings(),
    );
  }

  /**
   * Heuristic to determine the branch used when landing a diff.
   * By default, it returns the 'master' branch.
   * If your project does not ship from the master branch,
   * you must override this yourself.
   * If your project does not ship from the branch that diffs 'arc land'
   * onto, then override this method to return null.
   */
  public function getLandBranch(): ?string {
    $internal_branches = Keyset\map(
      $this->getBranchConfigs(),
      $branch_config ==> $branch_config['internal'],
    );
    invariant(
      C\contains($internal_branches, 'master'),
      'Branch setup without master detected! You must override '.
      'getLandBranch to return the default diff land branch for your '.
      'project, or null if your project does not ship from the diff land '.
      'branch.',
    );
    return 'master';
  }

  final public function postFilterChangesets(
    vec<ShipItChangeset> $changesets,
    ShipItRepo $dest,
  ): vec<ShipItChangeset> {
    $merged_changesets = $this->mergeSubmoduleChangesets($changesets);
    if ($this->shouldSkipUpdateSubmodules($merged_changesets, $dest)) {
      return vec[];
    } else {
      return $merged_changesets;
    }
  }

  final public function mergeSubmoduleChangesets(
    vec<ShipItChangeset> $changesets,
  ): vec<ShipItChangeset> {
    $new_changesets = vec[];
    $submodules_changeset = null;
    foreach ($changesets as $changeset) {
      if ($this->isUpdatingSubmodules($changeset)) {
        if ($submodules_changeset === null) {
          $submodules_changeset = $changeset;
        } else {
          if ($changeset->isValid()) {
            $submodules_changeset = $submodules_changeset
              ->withID($changeset->getID())
              ->withDiffs(
                $this->mergeSubmoduleDiffs($submodules_changeset, $changeset),
              )
              ->withTimestamp($changeset->getTimestamp())
              ->withAuthor($changeset->getAuthor())
              ->withSubject($changeset->getSubject())
              ->withMessage($changeset->getMessage())
              ->withDebugMessage(
                'MERGE %s %s',
                $submodules_changeset->getShortID(),
                $submodules_changeset->getSubject(),
              );
            foreach ($changeset->getDebugMessages() as $debug_message) {
              $submodules_changeset = $submodules_changeset->withDebugMessage(
                '%s',
                $debug_message,
              );
            }
          } else {
            $submodules_changeset = $submodules_changeset->withDebugMessage(
              'SKIPPED COMMIT (%s) - Would have merged submodule commit',
              $changeset->getShortID(),
            );
          }
        }
      } else {
        if ($submodules_changeset !== null) {
          $new_changesets[] = $submodules_changeset;
          $submodules_changeset = null;
        }
        $new_changesets[] = $changeset;
      }
    }
    if ($submodules_changeset !== null) {
      $new_changesets[] = $submodules_changeset;
    }
    return $new_changesets;
  }

  final public function shouldSkipUpdateSubmodules(
    vec<ShipItChangeset> $changesets,
    ShipItRepo $dest,
  ): bool {
    $changesets = Vec\filter($changesets, $changeset ==> $changeset->isValid());
    if (
      C\count($changesets) === 1 && $this->isUpdatingSubmodules($changesets[0])
    ) {
      // If that's all there is, skip the whole operation unless enough
      // time has passed or a non-submodule commit has been made.
      $dest_head = $dest->getHeadChangeset();
      if ($dest_head !== null && $this->isUpdatingSubmodules($dest_head)) {
        /* HH_IGNORE_ERROR[2049] __PHPStdLib */
        /* HH_IGNORE_ERROR[4107] __PHPStdLib */
        $time_elapsed = \time() - $dest_head->getTimestamp();
        if ($time_elapsed < self::UPDATE_SUBMODULE_FREQUENCY) {
          /* HH_IGNORE_ERROR[2049] __PHPStdLib */
          /* HH_IGNORE_ERROR[4107] __PHPStdLib */
          \printf(
            "  SKIP Not updating submodules for another %d seconds\n",
            self::UPDATE_SUBMODULE_FREQUENCY - $time_elapsed,
          );
          return true;
        }
      }
    }
    return false;
  }

  private function isUpdatingSubmodules(ShipItChangeset $changeset): bool {
    return (
      $changeset->getAuthor() === self::UPDATE_SUBMODULE_AUTHOR &&
      $changeset->getSubject() === self::UPDATE_SUBMODULE_SUBJECT
    );
  }

  /**
   * Patches the new changeset's diffs on top of the old changeset's diffs.
   * XXX this might break on HG, but that's okay, because this is only
   * relevant to git submodules.
   */
  private function mergeSubmoduleDiffs(
    ShipItChangeset $old_changeset,
    ShipItChangeset $new_changeset,
  ): vec<ShipItDiff> {
    $diffs_map = dict[];
    foreach ($old_changeset->getDiffs() as $diff) {
      $diffs_map[$diff['path']] = $diff;
    }
    foreach ($new_changeset->getDiffs() as $diff) {
      // Concatenate the new changeset's file body after the old changeset's
      // file body, or just add the new changeset's file if it does not exist
      // in the old changeset.
      if (
        !C\is_empty(Vec\filter(
          $diffs_map,
          ($diff_map) ==> $diff_map['path'] === $diff['path'],
        ))
      ) {
        $new_body = $diffs_map[$diff['path']]['body'].$diff['body'];
      } else {
        $new_body = $diff['body'];
      }
      $diffs_map[$diff['path']] = shape(
        'path' => $diff['path'],
        'body' => $new_body,
      );
    }
    return vec($diffs_map);
  }

  /**
   * Override this function with '//' or similar to automatically comment
   * and uncomment lines marked with oss-enable or oss-disable (configurable,
   * see below) when exporting or importing commits
   */
  public function getCommentMarker(): ?string {
    return null;
  }

  /**
   * Automatically comment out lines that are marked with this when exporting
   */
  public function getCommentLine(): string {
    return '@oss-disable';
  }

  /**
   * Automatically comment out lines that are marked with this when importing
   */
  public function getUncommentLine(): string {
    return '@oss-enable';
  }
}
