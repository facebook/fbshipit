<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
namespace Facebook\ShipIt;

use \Facebook\ImportIt\{
  ImportItPathFilters,
  ImportItSubmoduleFilter,
  ImportItSyncPhase,
};

type GetPathMappingsFn = (function(): ImmMap<string, string>);

type FBSourceBranchConfig = shape(
  'internal' => string,
  'external' => string,
  ?'projectFilterChangeset' =>
    (function(ShipItChangeset, GetPathMappingsFn): ShipItChangeset),
  ?'getPathMappings' => GetPathMappingsFn,
);

/** Base class for projects that have no special requirements.
 *
 * If you need more flexibility than this provides, use the classes
 * directly (eg shipit_hhvm.php and shipit_buck.php)
 */
abstract class FBShipItConfig implements IHasFBShipItCLIStaticConfig {
  // Do not update submodules twice in a row in a 24-hour period.
  const int UPDATE_SUBMODULE_FREQUENCY = 60 * 60 * 24;
  const string UPDATE_SUBMODULE_AUTHOR = 'svcscm <svcscm@fb.com>';
  const string UPDATE_SUBMODULE_SUBJECT = 'Updating submodules';

  public abstract static function getDefaultPathMappings(
  ): ImmMap<string, string>;

  protected static function defaultProjectFilterChangeset(
    ShipItChangeset $changeset,
    GetPathMappingsFn $get_path_mappings,
  ): ShipItChangeset {
    return $changeset
      |> FBCommonFilters::applyAll(
        $$,
        shape(
          'stripCommonFiles/exceptions' =>
            static::getStripCommonFilesExceptions(),
        ),
      )
      |> ShipItPathFilters::stripPaths(
        $$,
        static::getDefaultStrippedFiles(),
        static::getDefaultStrippedFileExceptions(),
      )
      |> ShipItPathFilters::moveDirectories($$, $get_path_mappings());
  }

  /*
   * Override to return a vector of regular expression strings that match
   * whitelisted files or directories that will not be stripped, even if
   * they have names that would normally exclude them.
   * Example: '@^facebook[/|$]@' to whitelist files inside facebook/
   * directories.
   */
  protected static function getStripCommonFilesExceptions(): ImmVector<string> {
    return ImmVector {};
  }

  /*
   * Blacklist of regular expression strings that match project files which
   * should be stripped out of published commits.
   */
  protected static function getDefaultStrippedFiles(): ImmVector<string> {
    return ImmVector {};
  }

  /*
   * Whitelist of regular expression strings that match project files which
   * should not be stripped, even if they match the above project-specific
   * blacklist.
   */
  protected static function getDefaultStrippedFileExceptions(
  ): ImmVector<string> {
    return ImmVector {};
  }

  // Public so that you can add a unit test
  final public static function filterChangeset(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $branch_config,
    bool $use_confidential_filter = true,
  ): ShipItChangeset {
    $changeset = $changeset
      |> self::stripExceptSourceRoots($$, $branch_config)
      |> self::filterSubmodules($$)
      |> (
        self::getProjectFilterChangesetFn($branch_config)
      )($$, self::getPathMappingsFn($branch_config));
    if ($use_confidential_filter) {
      $changeset = FBConfidentialFilter::applyAll($changeset);
    }
    return $changeset;
  }

  public static function getSubmoduleMappings(): ImmMap<string, string> {
    return ImmMap {};
  }

  private static function getSourceRoots(
    FBSourceBranchConfig $branch_config,
  ): ImmSet<string> {
    $config = static::getStaticConfig();
    $paths = (self::getPathMappingsFn($branch_config))()
      ->keys()
      ->toSet();
    $interfaces = new Set(\class_implements(static::class));
    if (
      !$interfaces->contains(ISupportsFBCodeBuilder::class) &&
      $config['internalRepo'] === 'fbsource' &&
      !static::getSubmoduleMappings()->isEmpty()
    ) {
      // Add the default project hashes folder.  This is stripped after we add
      // any submodules.
      $paths->add('fbcode/opensource/project_hashes/');
    }

    if ($paths->contains('')) {
      // All paths are included.
      return ImmSet {};
    }
    $paths = $paths->toArray();
    // Sort least specific to most specific.
    \sort(&$paths);
    $roots = Set {};
    foreach ($paths as $path) {
      // If this path starts with any elements in the set of roots we have
      // already computed, we do not need to add this as it would be redundant.
      $root_match = false;
      foreach ($roots as $root) {
        $root_match = $root_match || \strncmp($path, $root, \strlen($root)) === 0;
      }
      if ($root_match) {
        continue;
      }
      $roots->add($path);
    }
    return $roots->toImmSet();
  }

  public static function getBaseConfig(
    FBSourceBranchConfig $branch_config,
  ): ShipItBaseConfig {
    $static_config = static::getStaticConfig();
    return (
      new ShipItBaseConfig(
        '/var/tmp/fbshipit',
        /* source_dir = */ $static_config['internalRepo'],
        Shapes::idx(
          $static_config,
          'destDirName',
          $static_config['githubProject'],
        ),
        self::getSourceRoots($branch_config),
      )
    )
      ->withSourceBranch($branch_config['internal'])
      ->withDestinationBranch($branch_config['external']);
  }

  final protected static function stripExceptSourceRoots(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $branch_config,
  ): ShipItChangeset {
    $roots = static::getBaseConfig($branch_config)->getSourceRoots()
      ->filter($root ==> $root !== '');
    if (\count($roots) === 0) {
      return $changeset;
    }

    return ShipItPathFilters::stripExceptDirectories($changeset, $roots);
  }

  final protected static function filterSubmodules(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    if (static::getSubmoduleMappings()->isEmpty()) {
      return $changeset;
    }
    foreach (static::getSubmoduleMappings() as $source => $dest) {
      $changeset = ShipItSubmoduleFilter::useSubmoduleCommitFromTextFile(
        $changeset,
        $source,
        $dest,
      );
    }
    $interfaces = new Set(\class_implements(static::class));
    if ($interfaces->contains(ISupportsFBCodeBuilder::class)) {
      // FBCodeBuilder needs these hashes, but doesn't use them as submodules.
      return $changeset;
    }
    return $changeset
      |> ShipItPathFilters::stripPaths(
        $$,
        ImmVector {
          '@^fbcode/opensource/project_hashes/@',
        },
        ImmVector {
          '@^fbcode/opensource/project_hashes/shipit_test_file.txt$@',
        },
      );
  }

  public static function getPhases(
    FBSourceBranchConfig $branch_config,
  ): ImmVector<ShipItPhase> {
    $static_config = static::getStaticConfig();
    $config = static::getBaseConfig($branch_config);
    return ImmVector {
      new ShipItFilterSanityCheckPhase(
        $changeset ==> self::filterChangeset($changeset, $branch_config),
      ),
      new ShipItSaveConfigPhase(
        $static_config['githubOrg'],
        $static_config['githubProject'],
      ),
      new ShipItDeleteCorruptedRepoPhase(ShipItRepoSide::SOURCE),
      new ShipItDeleteCorruptedRepoPhase(ShipItRepoSide::DESTINATION),
      new FBRepoInitPhase(
        ShipItRepoSide::SOURCE,
        $static_config['internalRepo'],
      ),
      // Clean prior to pulling to remove any untracked files at the current
      // revision that may conflict with updates.
      new ShipItCleanPhase(ShipItRepoSide::SOURCE),
      new ShipItPullPhase(ShipItRepoSide::SOURCE),
      new ShipItCreateNewRepoPhase(
        $changeset ==> self::filterChangeset($changeset, $branch_config),
        shape(
          'name' => 'facebook-github-bot',
          'email' => 'facebook-github-bot@users.noreply.github.com',
        ),
      ),
      new ShipItGitHubInitPhase(
        $static_config['githubOrg'],
        $static_config['githubProject'],
        ShipItRepoSide::DESTINATION,
        ShipItTransport::HTTPS,
        FBGitHubUtils::class,
      ),
      // Clean prior to pulling to remove any untracked files at the current
      // revision that may conflict with updates.
      new ShipItCleanPhase(ShipItRepoSide::DESTINATION),
      new ShipItPullPhase(ShipItRepoSide::DESTINATION),
      new ShipItSyncPhase(
        ($config, $changeset) ==>
          self::filterChangeset($changeset, $branch_config),
        ImmSet {},
        ($changesets, $dest) ==> self::postFilterChangesets($changesets, $dest),
      ),
      new ShipItVerifyRepoPhase(
        $changeset ==> self::filterChangeset(
          $changeset,
          $branch_config,
          /* skip confidential filter b/c commits are not published */ false,
        ),
      ),
      new ShipItPushLfsPhase(
        ShipItRepoSide::DESTINATION,
        $static_config['githubOrg'],
        $static_config['githubProject'],
        Shapes::idx($static_config, 'gitLfs', false),
      ),
      new ShipItPushPhase(),
    };
  }

  //////////////////////////
  //
  // ImportIt Config logic
  //
  //////////////////////////

  /**
   * By default, ImportIt will just update paths.  If a project wants to do
   * something more complicated, they can override this method.
   */
  protected static function projectImportChangeset(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $branch_config,
  ): ShipItChangeset {
    return $changeset
      |> self::filterImportSubmodules($$)
      |> ImportItPathFilters::moveDirectories(
        $$,
        (self::getPathMappingsFn($branch_config))(),
        static::getSubmoduleMappings()
          ->keys()
          ->map($path ==> '@^'.$path.'$@'),
      );
  }

  // Public so that you can add a unit test
  final public static function importChangeset(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $branch_config,
  ): ShipItChangeset {
    return $changeset
      |> static::projectImportChangeset($$, $branch_config);
  }

  final public static function getImportBaseConfig(
    FBSourceBranchConfig $branch_config,
  ): ShipItBaseConfig {
    $static_config = static::getStaticConfig();
    $shipit_base_config = static::getBaseConfig($branch_config);
    return (
      new ShipItBaseConfig(
        /* base_dir = */ '/var/tmp/fbimportit',
        /* source_dir */ Shapes::idx(
          $static_config,
          'destDirName',
          $static_config['githubProject'],
        ),
        /* dest_dir = */ $static_config['internalRepo'],
        // We assume the entire GitHub repository is being imported.
        /* source_roots = */ ImmSet {},
      )
    )
      ->withSourceBranch($shipit_base_config->getDestinationBranch())
      ->withDestinationBranch($shipit_base_config->getSourceBranch());
  }

  final protected static function filterImportSubmodules(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    foreach (static::getSubmoduleMappings() as $dest => $source) {
      $changeset = ImportItSubmoduleFilter::moveSubmoduleCommitToTextFile(
        $changeset,
        $source,
        $dest,
      );
    }
    return $changeset;
  }

  public static function getImportPhases(
    FBSourceBranchConfig $branch_config,
  ): ImmVector<\Facebook\ShipIt\ShipItPhase> {
    $static_config = static::getStaticConfig();
    $config = static::getImportBaseConfig($branch_config);

    return ImmVector {
      new ShipItDeleteCorruptedRepoPhase(ShipItRepoSide::SOURCE),
      new ShipItDeleteCorruptedRepoPhase(ShipItRepoSide::DESTINATION),
      new \Facebook\ShipIt\ShipItGitHubInitPhase(
        $static_config['githubOrg'],
        $static_config['githubProject'],
        ShipItRepoSide::SOURCE,
        ShipItTransport::HTTPS,
        FBGitHubUtils::class,
      ),
      // Clean prior to pulling to remove any untracked files at the current
      // revision that may conflict with updates.
      new ShipItCleanPhase(ShipItRepoSide::SOURCE),
      new ShipItPullPhase(ShipItRepoSide::SOURCE),
      new \Facebook\ImportIt\FBRepoInitPhase(
        ShipItRepoSide::DESTINATION,
        $static_config['internalRepo'],
      ),
      // Clean prior to pulling to remove any untracked files at the current
      // revision that may conflict with updates.
      new ShipItCleanPhase(ShipItRepoSide::DESTINATION),
      new ShipItPullPhase(ShipItRepoSide::DESTINATION),
      new ImportItSyncPhase(
        $changeset ==> self::importChangeset($changeset, $branch_config),
      ),
    };
  }

  /**
   * Maps source branches to destination branches.
   * Note: while a single source branch can map to multiple destination
   * branches, you cannot map multiple source branches to one destination
   * branch.
   *
   * If you need to override shipit logic for certain branches,
   * pass override functions into the shape.
   */
  public static function getBranchConfigs(): ImmVector<FBSourceBranchConfig> {
    return ImmVector {
      shape(
        'internal' => 'master',
        'external' => 'master',
      ),
    };
  }

  /**
   * Uses default function implementation if no override is provided.
   */
  private static function getProjectFilterChangesetFn(
    FBSourceBranchConfig $branch_config,
  ): (function(ShipItChangeset, GetPathMappingsFn): ShipItChangeset) {
    return Shapes::idx(
      $branch_config,
      'projectFilterChangeset',
      ($changeset, $get_path_mappings) ==>
        static::defaultProjectFilterChangeset($changeset, $get_path_mappings),
    );
  }

  /**
   * Uses default function implementation if no override is provided.
   */
  protected static function getPathMappingsFn(
    FBSourceBranchConfig $branch_config,
  ): GetPathMappingsFn {
    return Shapes::idx(
      $branch_config,
      'getPathMappings',
      () ==> static::getDefaultPathMappings(),
    );
  }

  /**
   * Heuristic to determine the branch used when landing a diff.
   * By default, it returns the 'master' branch.
   * If your project does not ship from the master branch,
   * you must override this yourself.
   * If your project does not ship from the branch that diffs 'arc land'
   * onto, then override this method to return null.
   */
  public static function getLandBranch(): ?string {
    $internal_branches = static::getBranchConfigs()
      ->map($branch_config ==> $branch_config['internal'])
      ->toSet();
    invariant(
      $internal_branches->contains('master'),
      'Branch setup without master detected! You must override '.
      'getLandBranch to return the default diff land branch for your '.
      'project, or null if your project does not ship from the diff land '.
      'branch.',
    );
    return 'master';
  }

  final public static function postFilterChangesets(
    ImmVector<ShipItChangeset> $changesets,
    ShipItRepo $dest,
  ): ImmVector<ShipItChangeset> {
    $merged_changesets = self::mergeSubmoduleChangesets($changesets);
    if (self::shouldSkipUpdateSubmodules($merged_changesets, $dest)) {
      return ImmVector {};
    } else {
      return $merged_changesets;
    }
  }

  final public static function mergeSubmoduleChangesets(
    ImmVector<ShipItChangeset> $changesets,
  ): ImmVector<ShipItChangeset> {
    $new_changesets = Vector{};
    $submodules_changeset = null;
    foreach ($changesets as $changeset) {
      if (self::isUpdatingSubmodules($changeset)) {
        if ($submodules_changeset === null) {
          $submodules_changeset = $changeset;
        } else {
          if ($changeset->isValid()) {
            $submodules_changeset = $submodules_changeset
              ->withID($changeset->getID())
              ->withDiffs(
                self::mergeSubmoduleDiffs($submodules_changeset, $changeset)
              )
              ->withTimestamp($changeset->getTimestamp())
              ->withAuthor($changeset->getAuthor())
              ->withSubject($changeset->getSubject())
              ->withMessage($changeset->getMessage())
              ->withDebugMessage(
                'MERGE %s %s',
                $submodules_changeset->getShortID(),
                $submodules_changeset->getSubject(),
              );
            foreach($changeset->getDebugMessages() as $debug_message) {
              $submodules_changeset = $submodules_changeset->withDebugMessage(
                '%s', $debug_message,
              );
            }
          } else {
            $submodules_changeset = $submodules_changeset->withDebugMessage(
              'SKIPPED COMMIT (%s) - Would have merged submodule commit',
              $changeset->getShortID(),
            );
          }
        }
      } else {
        if ($submodules_changeset !== null) {
          $new_changesets[] = $submodules_changeset;
          $submodules_changeset = null;
        }
        $new_changesets[] = $changeset;
      }
    }
    if ($submodules_changeset !== null) {
      $new_changesets[] = $submodules_changeset;
      $submodules_changeset = null;
    }
    return $new_changesets->toImmVector();
  }

  final public static function shouldSkipUpdateSubmodules(
    ImmVector<ShipItChangeset> $changesets,
    ShipItRepo $dest,
  ): bool {
    $changesets = $changesets->filter($changeset ==> $changeset->isValid());
    if (
      $changesets->count() === 1 &&
      self::isUpdatingSubmodules($changesets[0])
    ) {
      // If that's all there is, skip the whole operation unless enough
      // time has passed or a non-submodule commit has been made.
      $dest_head = $dest->getHeadChangeset();
      if ($dest_head !== null && self::isUpdatingSubmodules($dest_head)) {
        $time_elapsed = \time() - $dest_head->getTimestamp();
        if ($time_elapsed < self::UPDATE_SUBMODULE_FREQUENCY) {
          \printf(
            "  SKIP Not updating submodules for another %d seconds\n",
            self::UPDATE_SUBMODULE_FREQUENCY - $time_elapsed,
          );
          return true;
        }
      }
    }
    return false;
  }

  private static function isUpdatingSubmodules(
    ShipItChangeset $changeset,
  ): bool {
    return (
      $changeset->getAuthor() === self::UPDATE_SUBMODULE_AUTHOR &&
      $changeset->getSubject() === self::UPDATE_SUBMODULE_SUBJECT
    );
  }

  /**
   * Patches the new changeset's diffs on top of the old changeset's diffs.
   * XXX this might break on HG, but that's okay, because this is only
   * relevant to git submodules.
   */
  private static function mergeSubmoduleDiffs(
    ShipItChangeset $old_changeset,
    ShipItChangeset $new_changeset,
  ): ImmVector<ShipItDiff> {
    $diffs_map = Map{};
    foreach ($old_changeset->getDiffs() as $diff) {
      $diffs_map[$diff['path']] = $diff;
    }
    foreach ($new_changeset->getDiffs() as $diff) {
      // Concatenate the new changeset's file body after the old changeset's
      // file body, or just add the new changeset's file if it does not exist
      // in the old changeset.
      if ($diffs_map->contains($diff['path'])) {
        $new_body = $diffs_map[$diff['path']]['body'] . $diff['body'];
      } else {
        $new_body = $diff['body'];
      }
      $diffs_map[$diff['path']] = shape(
        'path' => $diff['path'],
        'body' => $new_body,
      );
    }
    return $diffs_map->values()->toImmVector();
  }
}
