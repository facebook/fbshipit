<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
namespace Facebook\ShipIt\Config;

use \Facebook\ShipIt\ {
  FBSourceBranchConfig,
  FBShipItCLIStaticConfig,
  FBShipItConfig,
  GetPathMappingsFn,
  ShipItChangeset,
  ShipItConditionalLinesFilter,
  ShipItPathFilters,
};

abstract class FBWWWBase extends FBShipItConfig {
  <<__Override>>
  protected static function defaultProjectFilterChangeset(
    ShipItChangeset $changeset,
    GetPathMappingsFn $get_path_mappings,
  ): ShipItChangeset {
    return parent::defaultProjectFilterChangeset($changeset, $get_path_mappings)
      |> ShipItConditionalLinesFilter::commentLines(
        $$,
        '@oss-disable',
        '//',
      )
      |> ShipItConditionalLinesFilter::uncommentLines(
        $$,
        '@oss-enable',
        '//',
      )
      |> ShipItPathFilters::rewritePaths(
        $$,
        $path ==> \preg_replace(
          '@^src/(.+/)?__tests__/@',
          'tests/\1',
          $path,
        ),
      )
      |> self::renameGenToAsync($$);
  }

  final public static function renameGenToAsync(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    return self::renameFunctions(
      $changeset,
      $name ==> {
        if ($name === 'gen') {
          return 'from_async';
        }
        if ($name === 'testGen') {
          return 'testFromAsync';
        }
        if (\strpos($name, 'gen_') === 0) {
          // function
          return \substr($name, 4).'_async';
        }
        if (\strpos($name, 'gen') === 0) {
          // method
          $name = \substr($name, 3);
          $name[0] = \strtolower($name[0]);
          return $name.'Async';
        }
        if (\strpos($name, 'testGen') === 0) {
          return 'test'.\substr($name, 7).'Async';
        }
        return $name;
      }
    );
  }

  final private static function renameFunctions(
    ShipItChangeset $changeset,
    (function(string):string) $renamer,
  ): ShipItChangeset {
    $diffs = Vector {};
    foreach ($changeset->getDiffs() as $diff) {
      $diff['body'] = $diff['body']
        |> \explode("\n", $$)
        |> (new ImmVector($$))->map(
          $line ==> \preg_replace_callback(
            // Comma and dot for doc comments
            '/(function |\\\\|\\|>| |->|::)([a-zA-Z0-9_]+)(\\(|<|,|\\.)/',
            $matches ==> $matches[1].$renamer($matches[2]).$matches[3],
            $line,
          ),
        )
        |> \implode("\n", $$);
      $diffs[] = $diff;
    }
    return $changeset->withDiffs($diffs->immutable());
  }

  final public static function renameAsyncToGen(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    return self::renameFunctions(
      $changeset,
      $name ==> {
        if (\substr($name, 0, 2) === '__') {
          return $name;
        }
        if ($name === 'from_async') {
          return 'gen';
        }
        if ($name === 'testFromAsync') {
          return 'testGen';
        }
        if (\substr($name, -6) === '_async') {
          return 'gen_'.\substr($name, 0, -6);
        }
        if (\substr($name, 0, 4) === 'test' && \substr($name, -5) === 'Async') {
          return 'testGen'.\substr(
            $name,
            4,
            \strlen($name) - 9,
          );
        }
        if (\substr($name, -5) === 'Async') {
          $name = \substr($name, 0, -5);
          $name[0] = \strtoupper($name[0]);
          return 'gen'.$name;
        }
        return $name;
      }
    );
  }

  <<__Override>>
  protected static function projectImportChangeset(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $branch_config,
  ): ShipItChangeset {
    return $changeset
      |> ShipItPathFilters::rewritePaths(
        $$,
        $path ==> \preg_replace(
          '@^tests/(.+/)?@',
          'src/\1__tests__/',
          $path,
        ),
      )
      |> self::renameAsyncToGen($$)
      |> parent::projectImportChangeset($$, $branch_config);
  }
}
