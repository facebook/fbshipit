<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * This file was moved from fbsource to www. View old history in diffusion:
 * https://fburl.com/caaich6c
 */
namespace Facebook\ImportIt;

use type Facebook\ShipIt\{
  FBGitHubUtils,
  IHasFBShipItCLIStaticConfig,
  ShipItBaseConfig,
  ShipItChangeset,
  ShipItCleanPhase,
  ShipItDeleteCorruptedRepoPhase,
  ShipItPullPhase,
  ShipItRepoSide,
  ShipItTransport,
};

/**
 * DEPRECATED - individual binaries are being migrated to a master
 * binary with a registry of config classes.
 * Base class for projects that have no special requirements.
 *
 * If you need more flexibility than this provides, use the classes
 * directly (eg tagit_buck.php)
 */
<<__Deprecated>>
abstract class FBImportItCLI
  implements
    IHasFBShipItCLIStaticConfig,
    \Facebook\ShipIt\Config\IShipItConfig {

  use \Facebook\ShipIt\FBShipItCLITrait;

  abstract const type TShipIt as ISupportsFBImportIt;

  <<__Override>>
  final public static function getStaticConfig(
  ): \Facebook\ShipIt\FBShipItCLIStaticConfig {
    $shipit_class = static::getShipItClass();
    return $shipit_class::getStaticConfig();
  }

  /**
   * By default, ImportIt will just update paths.  If a project wants to do
   * something more complicated, they can override this method.
   */
  protected static function projectFilterChangeset(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    $shipit_class = static::getShipItClass();
    return $changeset
      |> self::filterSubmodules($$)
      |> ImportItPathFilters::moveDirectories(
        $$,
        $shipit_class::getPathMappings(),
        $shipit_class::getSubmoduleMappings()
          |> Vec\keys($$)
          |> Vec\map($$, $path ==> '@^'.$path.'$@'),
      );
  }

  // Public so that you can add a unit test
  final public static function filterChangeset(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    return $changeset
      |> static::projectFilterChangeset($$);
  }


  <<__Override>>
  final public static function getBaseConfig(): ShipItBaseConfig {
    $static_config = static::getStaticConfig();
    $shipit_class = static::getShipItClass();
    $shipit_base_config = $shipit_class::getBaseConfig();
    return (
      new ShipItBaseConfig(
        /* base_dir = */ '/var/tmp/fbimportit',
        /* source_dir */ Shapes::idx($static_config, 'destDirName') ??
          $static_config['githubProject'],
        /* dest_dir = */ $static_config['internalRepo'],
        // We assume the entire GitHub repository is being imported.
        /* source_roots = */ keyset[],
      )
    )
      ->withSourceBranch($shipit_base_config->getDestinationBranch())
      ->withDestinationBranch($shipit_base_config->getSourceBranch());
  }

  final protected static function filterSubmodules(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    $shipit_class = static::getShipItClass();
    foreach ($shipit_class::getSubmoduleMappings() as $dest => $source) {
      $changeset = ImportItSubmoduleFilter::moveSubmoduleCommitToTextFile(
        $changeset,
        $source,
        $dest,
      );
    }
    return $changeset;
  }

  <<__Override>>
  public static function getPhases(): vec<\Facebook\ShipIt\ShipItPhase> {
    $static_config = static::getStaticConfig();
    return vec[
      new ShipItDeleteCorruptedRepoPhase(ShipItRepoSide::SOURCE),
      new ShipItDeleteCorruptedRepoPhase(ShipItRepoSide::DESTINATION),
      new \Facebook\ShipIt\ShipItGitHubInitPhase(
        $static_config['githubOrg'],
        $static_config['githubProject'],
        ShipItRepoSide::SOURCE,
        ShipItTransport::HTTPS,
        FBGitHubUtils::class,
      ),
      // Clean prior to pulling to remove any untracked files at the current
      // revision that may conflict with updates.
      new ShipItCleanPhase(ShipItRepoSide::SOURCE),
      new ShipItPullPhase(ShipItRepoSide::SOURCE),
      new FBRepoInitPhase(
        ShipItRepoSide::DESTINATION,
        $static_config['internalRepo'],
      ),
      // Clean prior to pulling to remove any untracked files at the current
      // revision that may conflict with updates.
      new ShipItCleanPhase(ShipItRepoSide::DESTINATION),
      new ShipItPullPhase(ShipItRepoSide::DESTINATION),
      new ImportItSyncPhase($changeset ==> self::filterChangeset($changeset)),
    ];
  }

  final public static function getShipItClass(
  ): classname<ISupportsFBImportIt> {
    $ts = type_structure(static::class, 'TShipIt');
    invariant($ts['kind'] === TypeStructureKind::OF_CLASS, 'unexpected type');
    return $ts['classname'];
  }

  <<__Override>>
  final public static function cliMain(): void {
    self::cliForBinary(static::class);
  }
}
