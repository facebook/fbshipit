<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * This file was moved from fbsource to www. View old history in diffusion:
 * https://fburl.com/st5ajaqm
 */
namespace Facebook\ImportIt;

use type Facebook\ShipIt\{ShipItShellCommand};

final class FBRepoInitPhase extends \Facebook\ShipIt\ShipItPhase {
  private bool $allowNuke = false;

  public function __construct(
    private \Facebook\ShipIt\ShipItRepoSide $side,
    private string $name,
  ) {
  }

  <<__Override>>
  protected function isProjectSpecific(): bool {
    return false;
  }

  <<__Override>>
  public function getReadableName(): string {
    return 'Initialize '.$this->side.' '.$this->name.' repository';
  }

  <<__Override>>
  public function getCLIArguments(): vec<\Facebook\ShipIt\ShipItCLIArgument> {
    return vec[
      shape(
        'long_name' => 'skip-'.$this->side.'-init',
        'description' => "Don't initialize the repository",
        'write' => $_ ==> $this->skip(),
      ),
      shape( // Removed; specified in code instead.
        'long_name' => $this->side.'-repo::',
      ),
      shape( // Removed; specified in code instead.
        'long_name' => 'src-repo::',
      ),
    ];
  }

  <<__Override>>
  public function runImpl(\Facebook\ShipIt\ShipItBaseConfig $config): void {
    $local_path = $this->side === \Facebook\ShipIt\ShipItRepoSide::SOURCE
      ? $config->getSourcePath()
      : $config->getDestinationPath();

    $sh_lock = \Facebook\ShipIt\ShipItRepo::createSharedLockForPath(
      $local_path,
    );

    /* HH_IGNORE_ERROR[2049] __PHPStdLib */
    /* HH_IGNORE_ERROR[4107] __PHPStdLib */
    if (\is_dir($local_path)) {
      return;
    }

    // In case the src repo dir was specified by hand
    /* HH_IGNORE_ERROR[2049] __PHPStdLib */
    /* HH_IGNORE_ERROR[4107] __PHPStdLib */
    if (\basename($local_path) !== $this->name) {
      /* HH_IGNORE_ERROR[2049] __PHPStdLib */
      ShipItLogger::err(
        'Facebook clone scripts require directory names to match repo names: '.
        "got '%s', expected '%s'\n",
        /* HH_IGNORE_ERROR[2049] __PHPStdLib */
        /* HH_IGNORE_ERROR[4107] __PHPStdLib */
        \basename($local_path),
        $this->name,
      );
      exit(1);
    }

    $command = $this->getCloneCommand();
    /* HH_IGNORE_ERROR[2049] __PHPStdLib */
    /* HH_IGNORE_ERROR[4107] __PHPStdLib */
    $local_parent_path = \dirname($local_path);
    /* HH_IGNORE_ERROR[2049] __PHPStdLib */
    /* HH_IGNORE_ERROR[4107] __PHPStdLib */
    if (!\is_dir($local_parent_path)) {
      /* HH_IGNORE_ERROR[2049] __PHPStdLib */
      /* HH_IGNORE_ERROR[4107] __PHPStdLib */
      \mkdir($local_parent_path, 0755, /* recursive = */ true);
    }
    // Make sure that "remove stale temp file" jobs don't clean this up
    /* HH_IGNORE_ERROR[2049] __PHPStdLib */
    /* HH_IGNORE_ERROR[4107] __PHPStdLib */
    \touch($local_parent_path);

    (new ShipItShellCommand($local_parent_path, ...$command))
      ->setRetries(2)
      ->setFailureHandler(
        $_ ==> (
          new ShipItShellCommand(
            $local_parent_path,
            'rm',
            '-rf',
            '--preserve-root',
            $local_path,
          )
        )->runSynchronously(),
      )
      ->runSynchronously();
  }

  private function getCloneCommand(): vec<string> {
    return Vec\filter(
      \Facebook\ShipIt\FBRepoInitPhase::getCloneCommand($this->name),
      $command ==> $command !== '--no-working-dir',
    );
  }
}
