<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
namespace Facebook\ShipIt\Config;

use \Facebook\ShipIt\ {
  FBGitHubUtils,
  FBShipItCLIStaticConfig,
  FBShipItConfig,
  FBShipItPublicizeSyncScriptsPhase,
  FBSourceBranchConfig,
  GetPathMappingsFn,
  ShipItBaseConfig,
  ShipItChangeset,
  ShipItGitHubCredentials,
  ShipItGitHubUtils,
  ShipItPathFilters,
  ShipItPhase,
  ShipItSyncPhase,
};

final class FacebookFbshipit extends FBShipItConfig {
  <<__Override>>
  public static function getStaticConfig(): FBShipItCLIStaticConfig {
    return shape(
      'internalRepo' => 'fbsource',
      'githubOrg' => 'facebook',
      'githubProject' => 'fbshipit',
    );
  }

  <<__Override>>
  protected static function defaultProjectFilterChangeset(
    ShipItChangeset $changeset,
    GetPathMappingsFn $get_path_mappings,
  ): ShipItChangeset {
    return $changeset
      |> ShipItPathFilters::rewritePaths(
        $$,
        $path ==> \str_replace('/public_tld/dot_', '/public_tld/.', $path),
      )
      |> parent::defaultProjectFilterChangeset($$, $get_path_mappings)
      |> self::changeExampleExtensions($$);
  }

  <<__Override>>
  protected static function getStripCommonFilesExceptions(): ImmVector<string> {
    return ImmVector {
      '@^fbcode/opensource/shipit/config/.*$@',
    };
  }

  <<__Override>>
  protected static function getDefaultStrippedFiles(): ImmVector<string> {
    return ImmVector {
      '@/fb-private/@',
      // Replacement implementation in public_tld
      '@(^|/)autoload.php$@',
      '@(^|fbcode/opensource/shipit/)composer.json$@',
      '@(^|/)fb_.+\.sh$@',
      '@(^|/)fb_.+\.py$@',
      '@(^|/)bin/generate-autoload-map.php@',
      // Do not sync examples for old-style projects
      '@(^|/)bin/(shipit_|importit_).*\.php@',
      '@(^|/)tests/(shipit|importit)/.*/projects/.*\.php@',
    };
  }

  <<__Override>>
  public static function getDefaultPathMappings(): ImmMap<string, string> {
    return ImmMap {
      'fbcode/opensource/shipit/public_tld/' => '',
      'fbcode/opensource/shipit/bin/' => 'fb-examples/bin/',
      'fbcode/opensource/shipit/config/fb-specific-but-public/' =>
        'fb-examples/config/',
      'fbcode/opensource/shipit/src/config/fb-specific-but-public/' =>
        'fb-examples/lib/config/',
      'fbcode/opensource/shipit/src/importit/fb-specific-but-public/' =>
        'fb-examples/lib/importit/',
      'fbcode/opensource/shipit/tests/importit/fb-specific-but-public/' =>
        'fb-examples/tests/importit/',
      'fbcode/opensource/shipit/src/shipit/fb-specific-but-public/' =>
        'fb-examples/lib/shipit/',
      'fbcode/opensource/shipit/tests/shipit/fb-specific-but-public/' =>
        'fb-examples/tests/shipit/',
      'fbcode/opensource/shipit/tests/config/fb-specific-but-public/' =>
        'fb-examples/tests/config/',
      'fbcode/opensource/shipit/src/' => 'src/',
      'fbcode/opensource/shipit/tests/' => 'tests/',
      'fbcode/opensource/shipit/.hhconfig' => '.hhconfig',
    };
  }

  <<__Override>>
  public static function getBaseConfig(
    FBSourceBranchConfig $branch_config,
  ): ShipItBaseConfig {
    return parent::getBaseConfig($branch_config)->withSourceRoots(
      ImmSet { 'fbcode/opensource/shipit/' },
    );
  }

  <<__Override>>
  protected static function projectImportChangeset(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $branch_config,
  ): ShipItChangeset {
    return $changeset
      |> self::reverseExampleExtensions($$)
      |> parent::projectImportChangeset($$, $branch_config)
      |> ShipItPathFilters::rewritePaths(
        $$,
        $path ==> \str_replace('/public_tld/.', '/public_tld/dot_', $path),
      );
  }

  /**
   * Rename fb-examples/foo.php-example to fb-examples/foo.php.
   *
   * Inverse of changeExampleExtensions.
   */
  private static function reverseExampleExtensions(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    return ShipItPathFilters::rewritePaths(
      $changeset,
      $path ==> \preg_replace('@^(fb-examples/.+\.php)-example$@', '\1', $path),
    );
  }

  /**
   * Rename fb-examples/foo.php to fb-examples/foo.php-example.
   *
   * These files depend on some private code (eg fetching GitHub API tokens) -
   * so if these are .php files, the typechecker will fail.
   */
  private static function changeExampleExtensions(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    return ShipItPathFilters::rewritePaths(
      $changeset,
      $path ==> \preg_replace('@^fb-examples/.+\.php$@', '\0-example', $path),
    );
  }

  private static function getProjectFilePatterns(): ImmSet<string> {
    return ImmSet {
      '@(^|/)bin/importit_(?<project>[^/]+)\.php$@',
      '@(^|/)bin/shipit_(?<project>[^/]+)\.php$@',
      '@(^|/)tests(/[^/]+)*/projects/(?<project>[^/]+)Test\.php$@',
    };
  }
}
