<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
namespace Facebook\ShipIt\Config;

use \Facebook\ShipIt\ {
  FBCommonFilters,
  FBShipItCLIStaticConfig,
  FBShipItConfig,
  FBSourceBranchConfig,
  GetPathMappingsFn,
  ShipItChangeset,
  ShipItFilterSanityCheckPhase,
  ShipItPathFilters,
};

final class FacebookFlow extends FBShipItConfig {
  const HACK_ROOT_PLACEHOLDER = "<HACK_ROOT>/";

  <<__Override>>
  public static function getBranchConfigs(): ImmVector<FBSourceBranchConfig> {
    return ImmVector {
      shape(
        'internal' => 'master',
        'external' => 'master',
      ),
      shape(
        'internal' => 'remote/fbcode/releases/flow/v0.85',
        'external' => 'v0.85',
      ),
      shape(
        'internal' => 'remote/fbcode/releases/flow/v0.86',
        'external' => 'v0.86',
      ),
    };
  }

  <<__Override>>
  protected static function defaultProjectFilterChangeset(
    ShipItChangeset $changeset,
    GetPathMappingsFn $get_path_mappings,
  ): ShipItChangeset {
    $subject = self::getNewSubject($changeset);
    return $changeset
      |> parent::defaultProjectFilterChangeset($$, $get_path_mappings)
      |> $$->withSubject($subject)
      |> ShipItPathFilters::rewritePaths($$, $path ==> {
        $root = self::HACK_ROOT_PLACEHOLDER;
        if (\strncmp($path, $root, \strlen($root)) !== 0) {
          return $path;
        } else {
          return 'hack/' . \substr($path, \strlen($root));
        }
      });
  }

  <<__Override>>
  protected static function getStripCommonFilesExceptions(): ImmVector<string> {
    return self::getSharedStripExceptions();
  }

  <<__Override>>
  protected static function getDefaultStrippedFiles(): ImmVector<string> {
    return ImmVector {
      '@fbcode/hphp/hack/@',
      '@fbcode/flow/.merlin@',
      '@fbcode/flow/hack@',
    };
  }

  <<__Override>>
  protected static function getDefaultStrippedFileExceptions(
  ): ImmVector<string> {
    $test_file_name = ShipItFilterSanityCheckPhase::TEST_FILE_NAME;
    return self::getSharedStripExceptions()->concat(ImmVector {
      // ShipItFilterSanityCheckPhase doesn't like that we filter the
      // root, except for a whitelist. So whitelist the file the test
      // tests for...
      '@fbcode/hphp/hack/src/'.$test_file_name.'@',
      '@fbcode/hphp/hack/'.$test_file_name.'@',

      // Stuff used in open source that isn't used internally
      '@fbcode/hphp/hack/src/\.gitignore$@',
      '@fbcode/hphp/hack/src/\.ocp-indent$@',
      '@fbcode/hphp/hack/src/_tags$@',
      '@fbcode/hphp/hack/src/fsevents/@',
      '@fbcode/hphp/hack/src/fsnotify_darwin/@',
      '@fbcode/hphp/hack/src/fsnotify_win/@',
      '@fbcode/hphp/hack/src/injection/injector_config.mli@',
      '@fbcode/hphp/hack/src/stubs/eventLogger\.ml$@',
      '@fbcode/hphp/hack/LICENSE$@',
      '@fbcode/hphp/hack/PATENTS@',

      // Stuff that is currently unused, but not Hack-specific and we
      // will probably want to use some day

      '@fbcode/hphp/hack/src/libancillary/@',
      '@fbcode/hphp/hack/src/monitor/@',
      '@fbcode/hphp/hack/src/third-party/libancillary/@',

      //
      // keep these in sync with fbcode/flow/facebook/dep_test.py!
      //
      '@fbcode/hphp/hack/src/common/@',
      '@fbcode/hphp/hack/src/dfind/@',
      '@fbcode/hphp/hack/src/find/@',
      '@fbcode/hphp/hack/src/fsnotify_linux/@',
      '@fbcode/hphp/hack/src/heap/@',
      '@fbcode/hphp/hack/src/hhi/@',
      '@fbcode/hphp/hack/src/injection/default_injector/@',
      '@fbcode/hphp/hack/src/procs/@',
      '@fbcode/hphp/hack/src/socket/@',
      '@fbcode/hphp/hack/src/third-party/avl/@',
      '@fbcode/hphp/hack/src/third-party/core/@',
      '@fbcode/hphp/hack/src/third-party/inotify/@',
      // allow all .ml .mli and .c files in utils
      '@fbcode/hphp/hack/src/utils/(?!(?:errors|lint)\.mli?)[^/]*\.(mli?|c)@',
      '@fbcode/hphp/hack/src/utils/build_mode/@',
      '@fbcode/hphp/hack/src/utils/collections/@',
      '@fbcode/hphp/hack/src/utils/disk/@',
      '@fbcode/hphp/hack/src/utils/hh_json/@',
      '@fbcode/hphp/hack/src/utils/sys/@',
      '@fbcode/hphp/hack/src/watchman/@',
    });
  }

  <<__Override>>
  public static function getDefaultPathMappings(): ImmMap<string, string> {
    return ImmMap {
      // order matters!
      'fbcode/flow/github/_gitattributes' => '.gitattributes',
      'fbcode/flow/github/.merlin' => '.merlin',
      'fbcode/flow/' => '',
      'fbcode/hphp/hack/src/' => 'hack/',
      'fbcode/hphp/hack/' => self::HACK_ROOT_PLACEHOLDER,
    };
  }

  <<__Override>>
  public static function getStaticConfig(): FBShipItCLIStaticConfig {
    return shape(
      'internalRepo' => 'fbsource',
      'githubOrg' => 'facebook',
      'githubProject' => 'flow',
    );
  }

  <<__Override>>
  protected static function projectImportChangeset(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $branch_config,
  ): ShipItChangeset {
    $github_only_files = (self::getPathMappingsFn($branch_config))()
      ->filterWithKey(
        ($internal, $_external) ==> \strpos($internal, '/github/')
      )
      ->values()
      ->toImmSet();
    return $changeset
      |> ShipItPathFilters::rewritePaths(
          $$,
          $path ==> {
            // prepend github-only files with `github/`
            if ($github_only_files->contains($path)) {
              return 'github/'.$path;
            }
            return $path;
          }
        )
      |> ShipItPathFilters::rewritePaths(
          $$,
          $path ==> {
            if (\strpos($path, '.gitattributes') !== false) {
              return \str_replace('.gitattributes', '_gitattributes', $path);
            }
            return $path;
          },
        )
      |> parent::projectImportChangeset($$, $branch_config)
      |> ShipItPathFilters::rewritePaths(
        $$,
        $path ==> {
          if (\strpos($path, 'hack/src/LICENSE') !== false) {
            return \str_replace('hack/src/LICENSE', 'hack/LICENSE', $path);
          }
          if (\strpos($path, 'hack/src/PATENTS') !== false) {
            return \str_replace('hack/src/PATENTS', 'hack/PATENTS', $path);
          }
          return $path;
        }
      );
  }

  private static function getSharedStripExceptions(): ImmVector<string> {
    return ImmVector {
      '@fbcode/flow/github/@',

      // Fallout from adding bzl files to common ShipIt filters
      '@utils\.bzl$@',
    };
  }

  private static function getNewSubject(
    ShipItChangeset $changeset,
  ): string {
    $changeset = FBCommonFilters::stripSubjectMergePrefix($changeset);

    $subject = $changeset->getSubject();

    if (\stripos($subject, '[flow]') !== false) {
      // Remove flow, preserve other sections
      $subject = \preg_replace(
        '/^((?:\[[^\]]+\]\s*)*)\[flow\]/i', '$1',
        $subject
      );
      return \trim(\preg_replace('/\s\s+/', ' ', $subject));
    }

    $subject = FBCommonFilters::stripSubjectTags($changeset)->getSubject();
    if (!$changeset->isValid()) {
      return $subject;
    }

    $search = 'fbcode/hphp/hack/';
    $search_len = \strlen($search);

    foreach ($changeset->getDiffs() as $diff) {
      if (\substr($diff['path'], 0, $search_len) !== $search) {
        return $subject;
      }
    }

    return '[hack] '.\trim($subject);
  }
}
