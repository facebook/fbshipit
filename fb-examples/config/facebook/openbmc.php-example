<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
namespace Facebook\ShipIt\Config;

use \Facebook\ShipIt\ {
  FBCommonFilters,
  FBOpenbmcCommonFilters,
  FBShipItCLIStaticConfig,
  FBShipItConfig,
  FBSourceBranchConfig,
  GetPathMappingsFn,
  ShipItChangeset,
  ShipItException,
  ShipItPathFilters,
  ShipItUtil,
};

final class FacebookOpenbmc extends FBShipItConfig {

  <<__Override>>
  protected static function defaultProjectFilterChangeset(
    ShipItChangeset $changeset,
    GetPathMappingsFn $get_path_mappings,
  ): ShipItChangeset {
    return $changeset
      |> ShipItPathFilters::stripPaths($$, self::getDefaultStrippedFiles())
      |> ShipItPathFilters::moveDirectories($$, $get_path_mappings())
      |> FBOpenbmcCommonFilters::applyAll($$, 'openbmc')
      |> FBCommonFilters::applyAll(
          $$,
          shape(
            // skip all the default strips.
            'stripCommonFiles/exceptions' =>
              self::getStripCommonFilesExceptions(),
            'filterMessageSections/keepFields' => ImmSet {
              'summary',
              'pulled by',
              'reviewed by',
              'test plan',
            },
          ),
        );
  }

  <<__Override>>
  protected static function getStripCommonFilesExceptions(): ImmVector<string> {
    // skip all the default strips.
    return ImmVector {
      '/.*/'
    };
  }

  <<__Override>>
  protected static function getDefaultStrippedFiles(): ImmVector<string> {
    return ImmVector {
      // Explicitly remove the recipe files which will be replaced by the
      // github directory contents.
      '@^meta-facebook/classes/fb-only-network.bbclass@',
      '@^meta-aspeed/recipes-bsp/u-boot/u-boot.*@',
      '@^meta-aspeed/recipes-bsp/u-boot/verified-boot.inc@',
      '@^meta-aspeed/recipes-kernel/linux/linux-.*@',
      # Remove linux and uboot patches (for now, resolve independently).
      '@^meta-aspeed/recipes-kernel/linux/files/linux-.*@',
      '@^meta-aspeed/recipes-bsp/u-boot/files/u-boot.*@',
      # Yocto releases are internal only.
      '@^yocto@',
      '@^.gitmodules@',
      '@^github/.gitmodules@',
      # Anything marked 'private' should not be synced.
      '@^.*private@',
      # Top level and sublevel directories named as facebook
      '@^facebook/@',
      '@/facebook/@',
      # Remove private/confidential projects
    };
  }

  <<__Override>>
  public static function getDefaultPathMappings(): ImmMap<string, string> {
    return ImmMap {
      # Provide an overlay to keep patches locally for various
      # minor tweaks to the github tree.
      'github/meta-facebook/classes/fb-only-network.bbclass' =>
        'meta-facebook/classes/fb-only-network.bbclass',
      'github/meta-aspeed/recipes-bsp/u-boot/u-boot_2013.07.bb' =>
        'meta-aspeed/recipes-bsp/u-boot/u-boot_2013.07.bb',
      'github/meta-aspeed/recipes-bsp/u-boot/u-boot_2016.07.bb' =>
        'meta-aspeed/recipes-bsp/u-boot/u-boot_2016.07.bb',
      'github/meta-aspeed/recipes-bsp/u-boot/u-boot-fw-utils_2013.07.bb' =>
        'meta-aspeed/recipes-bsp/u-boot/u-boot-fw-utils_2013.07.bb',
      'github/meta-aspeed/recipes-bsp/u-boot/u-boot-fw-utils_2016.07.bb' =>
        'meta-aspeed/recipes-bsp/u-boot/u-boot-fw-utils_2016.07.bb',
      'github/meta-aspeed/recipes-bsp/u-boot/u-boot.inc' =>
        'meta-aspeed/recipes-bsp/u-boot/u-boot.inc',
      'github/meta-aspeed/recipes-bsp/u-boot/u-boot-mkimage_2016.07.bb' =>
        'meta-aspeed/recipes-bsp/u-boot/u-boot-mkimage_2016.07.bb',
      'github/meta-aspeed/recipes-bsp/u-boot/verified-boot.inc' =>
        'meta-aspeed/recipes-bsp/u-boot/verified-boot.inc',
      'github/meta-aspeed/recipes-kernel/linux/linux-aspeed_2.6.28.9.bb' =>
        'meta-aspeed/recipes-kernel/linux/linux-aspeed_2.6.28.9.bb',
      'github/meta-aspeed/recipes-kernel/linux/linux-aspeed_4.1.bb' =>
        'meta-aspeed/recipes-kernel/linux/linux-aspeed_4.1.bb',
      'github/meta-aspeed/recipes-kernel/linux/linux-aspeed_4.17.bb' =>
        'meta-aspeed/recipes-kernel/linux/linux-aspeed_4.17.bb',
      'github/meta-aspeed/recipes-kernel/linux/linux-aspeed_4.17.bbappend' =>
        'meta-aspeed/recipes-kernel/linux/linux-aspeed_4.17.bbappend',
      'github/meta-aspeed/recipes-kernel/linux/linux-aspeed_4.18.bb' =>
        'meta-aspeed/recipes-kernel/linux/linux-aspeed_4.18.bb',
      'github/meta-aspeed/recipes-kernel/linux/linux-aspeed_4.18.bbappend' =>
        'meta-aspeed/recipes-kernel/linux/linux-aspeed_4.18.bbappend',
      'github/meta-aspeed/recipes-kernel/linux/linux-aspeed.inc' =>
      'meta-aspeed/recipes-kernel/linux/linux-aspeed.inc',
      'github/sync_yocto.sh' => 'sync_yocto.sh',
      'github/yocto/.gitignore' => 'yocto/.gitignore',
      # Keep the rest where it was
      '' => '',
    };
  }

  <<__Override>>
  public static function getStaticConfig(): FBShipItCLIStaticConfig {
    return shape(
      'internalRepo' => 'meta-openbmc',
      'githubOrg' => 'facebook',
      'githubProject' => 'openbmc',
    );
  }

  <<__Override>>
  public static function getBranchConfigs(): ImmVector<FBSourceBranchConfig> {
    return ImmVector {
      shape(
        'internal' => 'fido',
        'external' => 'master',
      ),
      shape(
        'internal' => 'helium',
        'external' => 'helium',
      ),
    };
  }

  public static function getUnsupportedImportPaths(): ImmVector<string> {
    return ImmVector {
      '@^meta-facebook/classes/fb-only-network.bbclass@',
      '@^sync_yocto.sh@',
      '@^yocto/.gitignore@',
      '@^meta-aspeed/recipes-bsp/u-boot/u-boot_2013.07.bb@',
      '@^meta-aspeed/recipes-bsp/u-boot/u-boot_2016.07.bb@',
      '@^meta-aspeed/recipes-bsp/u-boot/u-boot-fw-utils_2013.07.bb@',
      '@^meta-aspeed/recipes-bsp/u-boot/u-boot-fw-utils_2016.07.bb@',
      '@^meta-aspeed/recipes-bsp/u-boot/u-boot.inc@',
      '@^meta-aspeed/recipes-bsp/u-boot/u-boot-mkimage_2016.07.bb@',
      '@^meta-aspeed/recipes-bsp/u-boot/verified-boot.inc@',
      '@^meta-aspeed/recipes-kernel/linux/linux-aspeed_2.6.28.9.bb@',
      '@^meta-aspeed/recipes-kernel/linux/linux-aspeed_4.1.bb@',
      '@^meta-aspeed/recipes-kernel/linux/linux-aspeed_4.17.bb@',
      '@^meta-aspeed/recipes-kernel/linux/linux-aspeed_4.17.bbappend@',
      '@^meta-aspeed/recipes-kernel/linux/linux-aspeed_4.18.bb@',
      '@^meta-aspeed/recipes-kernel/linux/linux-aspeed_4.18.bbappend@',
      '@^meta-aspeed/recipes-kernel/linux/linux-aspeed.inc@',
    };
  }

  <<__Override>>
  protected static function projectImportChangeset(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $branch_config,
  ): ShipItChangeset {
    return $changeset
      // These files are replaced by GitHub specific versions
      // at shipit time and should never come back to us on import
      // with modifications.
      |> self::errorOnPaths(
        $$,
        static::getUnsupportedImportPaths(),
      );
  }

  <<TestsBypassVisibility>>
  protected static function errorOnPaths(
    ShipItChangeset $changeset,
    ImmVector<string> $unsupported_path_patterns,
  ): ShipItChangeset {
    foreach ($changeset->getDiffs() as $diff) {
      $path = $diff['path'];

      $match = ShipItUtil::matchesAnyPattern(
        $path,
        $unsupported_path_patterns,
      );

      if ($match !== null) {
        // This could be handled more gracefully in the future.
        throw new ShipItException(
          "Importing changes unsupported: ".$path
        );
      }
    }

    return $changeset;
  }

  public static function getLandBranch(): ?string {
    // ShipIt will assume that diffs will land onto the 'helium' branch.
    return 'helium';
  }
}
