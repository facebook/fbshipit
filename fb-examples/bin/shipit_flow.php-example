<?hh
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
namespace Facebook\ShipIt;

require_once(__DIR__.'/../autoload.php');

final class ShipItFlow extends FBShipItCLI {
  <<__Override>>
  protected static function projectFilterChangeset(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    $subject = self::getNewSubject($changeset);

    static $exceptions = ImmVector {
      '@fbcode/flow/github/@',
    };

    static $test_file_name = ShipItFilterSanityCheckPhase::TEST_FILE_NAME;

    return $changeset
      |> FBCommonFilters::applyAll(
          $$,
          shape(
            'stripCommonFiles/exceptions' => $exceptions,
          ))
      |> $$->withSubject($subject)
      |> ShipItPathFilters::stripPaths(
          $$,
          ImmVector {
            '@fbcode/hphp/hack/src/@',
            '@fbcode/flow/kpm.lock$@',
            '@fbcode/flow/(?:.+/)*yarn.lock$@',
            '@fbcode/flow/.npmrc$@',
            '@fbcode/flow/hack@',
          },
          $exceptions->concat(ImmVector {
            // ShipItFilterSanityCheckPhase doesn't like that we filter the
            // root, except for a whitelist. So whitelist the file the test
            // tests for...
            '@fbcode/hphp/hack/src/'.$test_file_name.'@',

            // Stuff used in open source that isn't used internally
            '@fbcode/hphp/hack/src/\.gitignore$@',
            '@fbcode/hphp/hack/src/\.ocp-indent$@',
            '@fbcode/hphp/hack/src/_tags$@',
            '@fbcode/hphp/hack/src/fsevents/@',
            '@fbcode/hphp/hack/src/fsnotify_darwin/@',
            '@fbcode/hphp/hack/src/fsnotify_win/@',
            '@fbcode/hphp/hack/src/injection/injector_config.mli@',
            '@fbcode/hphp/hack/src/stubs/eventLogger\.ml$@',

            // Stuff that is currently unused, but not Hack-specific and we
            // will probably want to use some day

            '@fbcode/hphp/hack/src/libancillary/@',
            '@fbcode/hphp/hack/src/monitor/@',
            '@fbcode/hphp/hack/src/third-party/libancillary/@',
            '@fbcode/hphp/hack/src/watchman/@',

            //
            // keep these in sync with fbcode/flow/facebook/dep_test.py!
            //
            '@fbcode/hphp/hack/src/dfind/@',
            '@fbcode/hphp/hack/src/find/@',
            '@fbcode/hphp/hack/src/fsnotify_linux/@',
            '@fbcode/hphp/hack/src/heap/@',
            '@fbcode/hphp/hack/src/hhi/@',
            '@fbcode/hphp/hack/src/injection/default_injector/@',
            '@fbcode/hphp/hack/src/procs/@',
            '@fbcode/hphp/hack/src/socket/@',
            '@fbcode/hphp/hack/src/third-party/avl/@',
            '@fbcode/hphp/hack/src/third-party/core/@',
            '@fbcode/hphp/hack/src/third-party/inotify/@',
            // allow all .ml .mli and .c files in utils
            '@fbcode/hphp/hack/src/utils/(?!(?:errors|lint)\.mli?)[^/]*\.(mli?|c)@',
            '@fbcode/hphp/hack/src/utils/collections/@',
            '@fbcode/hphp/hack/src/utils/disk/@',
            '@fbcode/hphp/hack/src/utils/hh_json/@',
          }),
        )
      |> ShipItPathFilters::moveDirectories($$, static::getPathMappings());
  }

  <<__Override>>
  public static function getPathMappings(): ImmMap<string, string> {
    return ImmMap {
      // order matters!
      'fbcode/flow/github/_gitattributes' => '.gitattributes',
      'fbcode/flow/github/website/yarn.lock' => 'website/yarn.lock',
      'fbcode/flow/github/.merlin' => '.merlin',
      'fbcode/flow/' => '',
      'fbcode/hphp/hack/src/' => 'hack/',
    };
  }

  <<__Override>>
  public static function getStaticConfig(): FBShipItCLIStaticConfig {
    return shape(
      'internalRepo' => 'fbsource',
      'githubOrg' => 'facebook',
      'githubProject' => 'flow',
      'sourceRoots' => ImmSet { 'fbcode/flow', 'fbcode/hphp/hack/src' },
    );
  }

  private static function getNewSubject(
    ShipItChangeset $changeset,
  ): string {
    $subject = $changeset->getSubject();

    if (stripos($subject, '[flow]') !== false) {
      // Remove flow, preserve other sections
      $subject = preg_replace(
        '/^((?:\[[^\]]+\]\s*)*)\[flow\]/i', '$1',
        $subject
      );
      return trim(preg_replace('/\s\s+/', ' ', $subject));
    }

    $subject = FBCommonFilters::stripSubjectTags($changeset)->getSubject();
    if (!$changeset->isValid()) {
      return $subject;
    }

    $search = 'fbcode/hphp/hack/';
    $search_len = strlen($search);

    foreach ($changeset->getDiffs() as $diff) {
      if (substr($diff['path'], 0, $search_len) !== $search) {
        return $subject;
      }
    }

    return '[hack] '.trim($subject);
  }
}

// Allow require() from unit test
if (isset($argv) && realpath($argv[0]) === realpath(__FILE__)) {
  ShipItFlow::cliMain();
}
