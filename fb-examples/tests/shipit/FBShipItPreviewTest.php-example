<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
namespace Facebook\ShipIt;

final class FBShipItPreviewTest extends BaseTest {

  // Make a string act like a file or stdin.
  private static function streamify(string $string): resource {
    $stream = \fopen('php://memory', 'r+');
    \fwrite($stream, $string);
    \rewind($stream);
    return $stream;
  }

  private static function makeChangeset(): ShipItChangeset {
    return (new ShipItChangeset())
      ->withID('deadbeef')
      ->withTimestamp(12345)
      ->withAuthor('yrahbar')
      ->withSubject('Test Commit')
      ->withMessage("Summary:\n Stuff")
      ->withDiffs(ImmVector {
          shape(
            'path' => 'public/example.php',
            'body' => 'Testing events from GitHub author date\n',
          ),
          shape(
            'path' => 'facebook/filtered.txt',
            'body' => 'Testing events from GitHub author date\n',
          ),
        });
  }

  /**
   * Close to an end-to-end test -- send input in a stream,
   * then decode the stdout stream back into an object.
   */
  public function testShipItPreview(): void {
    $data = '{
      "arcanistProject": "phabtest1_git",
      "changeset": {
        "id": "deadbeef",
        "timestamp": 12345,
        "author": "yrahbar",
        "subject": "Test Commit",
        "message": "Summary:\nStuff",
        "diffs": [
          {"path": "public/example.php", "body": ""},
          {"path": "facebook/filtered.txt", "body": ""}
        ]
      },
      "internalBranch": "master"
    }
    ===END===';
    // Capture stdout
    \ob_start();
    (new FBShipItPreview())->shipItPreview(self::streamify($data));
    $stdout = \ob_get_contents();
    \ob_end_clean();
    $this->assertEquals(
      \json_decode($stdout, true),
      array(
        shape(
          'changeset' => shape (
            'id' => 'deadbeef',
            'timestamp' => 12345,
            'author' => 'yrahbar',
            'subject' => 'Test Commit',
            'message' => 'Summary: Stuff',
            'diffs' => array(
              shape('path' => 'public/example.php', 'body' => ''),
            ),
          ),
          'githubOrg' => 'facebook',
          'githubProject' => 'phabtest1_git',
          'commitMessage' => "Test Commit\n\nSummary: Stuff",
          'externalBranch' => 'master',
          'patch' => null,
          'error' => null,
        ),
        shape(
          'changeset' => shape (
            'id' => 'deadbeef',
            'timestamp' => 12345,
            'author' => 'yrahbar',
            'subject' => 'Test Commit',
            'message' => 'Summary: Stuff',
            'diffs' => array(
              shape('path' => 'subdirectory/public/example.php', 'body' => ''),
            ),
          ),
          'githubOrg' => 'facebook',
          'githubProject' => 'phabtest1_git',
          'commitMessage' => "Test Commit\n\nSummary: Stuff",
          'externalBranch' => 'transformed_branch',
          'patch' => null,
          'error' => null,
        ),
      ),
    );
  }

  public function testHandleChangeset(): void {
    $changeset = self::makeChangeset();
    $result = (new FBShipItPreview())
      ->handleChangeset('phabtest1_git', 'side_branch', $changeset, null);
    $this->assertEquals(\count($result), 1);
    $this->assertEquals(
      $result[0]['changeset'],
      shape(
        'id' => 'deadbeef',
        'timestamp' => 12345,
        'author' => 'yrahbar',
        'subject' => 'Test Commit',
        'message' => 'Summary: Stuff',
        'diffs' => vec[
          shape('path' => 'public/example.php', 'body' => ''),
        ],
      ),
    );
    $this->assertEquals($result[0]['githubOrg'], 'facebook');
    $this->assertEquals($result[0]['githubProject'], 'phabtest1_git');
    $this->assertEquals(
      $result[0]['commitMessage'],
      "Test Commit\n\nSummary: Stuff",
    );
    $this->assertEquals($result[0]['patch'], null);
  }

  public function testHandleFullPatch(): void {
    $changeset = self::makeChangeset();
    // Actual Phabricator git-style raw patch of an fbsource diff
    $patch = \file_get_contents(__DIR__.'/example_fbsource_git_diff.patch');
    $result = (new FBShipItPreview())
      ->handleChangeset('fbsource', 'master', $changeset, $patch);
    $this->assertEquals(
      \file_get_contents(__DIR__.'/example_fbshipit_git_diff.patch'),
      $result[0]['patch'],
    );
    $diffs = $result[0]['changeset']['diffs'];
    $this->assertEquals(2, \count($diffs));
    $this->assertEquals(
      'fb-examples/tests/shipit/FBCommonFiltersTest.php-example',
      $diffs[0]['path'],
    );
    $this->assertEquals(
      'fb-examples/lib/shipit/FBCommonFilters.php-example',
      $diffs[1]['path'],
    );
    $this->assertEquals($result[0]['error'], null);
  }

  public function testHandleRenames(): void {
    $changeset = self::makeChangeset()->withDiffs(ImmVector {
      shape(
        'path' =>
          'from fbcode/opensource/shipit/src/shipit/fb-private/file.php',
        'body' => '_',
      ),
      shape(
        'path' => 'fbcode/opensource/shipit/src/shipit/file.php',
        'body' => '_',
      ),
    });
    $patch = \file_get_contents(__DIR__.'/example_rename_git_diff.patch');
    $result = (new FBShipItPreview())
      ->handleChangeset('fbsource', 'master', $changeset, $patch);
    $error = $result[0]['error'];
    invariant($error !== null, 'Expected error');
    $this->assertStringStartsWith('This patch contains renamed', $error);
    $diffs = $result[0]['changeset']['diffs'];
    $this->assertEquals(1, \count($diffs));
    $this->assertEquals($diffs[0]['path'], 'src/shipit/file.php');
  }
}
