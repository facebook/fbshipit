<?hh // strict
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
namespace Facebook\ShipIt;


final class HHVMTest extends FBPublicProjectBaseTest {
  public function examplesForFilteredSections(
  ): array<(ImmMap<string, string>,ImmMap<string, string>)> {
    return [
      tuple(
        ImmMap {
          'summary' => 'foo',
          'test plan' => 'bar',
          'facebook' => 'baz',
          'differential revision' => 'D12345',
        },
        ImmMap {
          'summary' => 'foo',
          'differential revision' => 'D12345',
        },
      ),
    ];
  }

  /**
   * @dataProvider examplesForFilteredSections
   */
  public function testFilteredSections(
    ImmMap<string, string> $in,
    ImmMap<string, string> $expected,
  ): void {
    $changeset = (new ShipItChangeset())
      ->withMessage(ShipItMessageSections::buildMessage($in));
    $changeset = self::map($changeset);
    $out = ShipItMessageSections::getSections(
      $changeset,
      FBCommonFilters::getSupportedMessageSectionNames(),
    );
    $this->assertEquals($expected, $out->toImmMap());
  }

  <<__Override>>
  protected static function map(
    ShipItChangeset $changeset
  ): ShipItChangeset {
    return ShipItHHVM::filterChangeset(
      $changeset,
    );
  }

  <<__Override>>
  public static function getExamplePathMappings(): ImmMap<string, ?string> {
    return ImmMap {
      'fbcode/hphp/foo' => 'hphp/foo',
      'fbcode/hphp/public_tld/foo' => 'foo',
      'fbcode/not_hphp/foo' => null,
    };
  }

  <<__Override>>
  protected function removesSummariesByDefault(): bool {
    return false;
  }

  final public function testPhases(): void {
    $phases = ShipItHHVM::getPhases();

    // Ensure our specialized phases are included
    $this->assertEquals(1, $phases->filter(
                          $phase ==> $phase instanceof HHVMEnvironmentCheckPhase
                        )->count());

    $this->assertEquals(1, $phases->filter(
                          $phase ==> $phase instanceof HHVMCleanThirdPartyPhase
                        )->count());

    $this->assertEquals(1, $phases->filter(
                          $phase ==> $phase instanceof HHVMBuildAndTestPhase
                        )->count());
  }
}
