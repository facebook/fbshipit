<?hh // strict
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
namespace Facebook\ShipIt;

final class FBGitHubUtilsTest extends BaseTest {
  public function exampleProjectCredentials(
  ): array<(FBGitHubUtils::TAllCredentials, string, string, string, string)> {
    return [
      tuple(
        array(
          'FACEBOOK_HHVM' => array(
            'hhvm-bot' => shape(
              'access_token' => 'deadbeefdeadbeefdeadbeefdeadbeefdeadbeef',
            ),
          ),
          'FACEBOOK_DEFAULT' => array(
            'facebook-github-bot' => shape(
              'access_token' => 'beefdeadbeefdeadbeefdeadbeefdeadbeefdead',
            ),
          ),
        ),
        'facebook',
        'hhvm',
        'hhvm-bot',
        'hhvm-bot@users.noreply.github.com',
      ),
      tuple(
        array(
          'FACEBOOK_DEFAULT' => array(
            'facebook-github-bot' => shape(
              'access_token' => 'beefdeadbeefdeadbeefdeadbeefdeadbeefdead',
            ),
          ),
        ),
        'facebook',
        'not-a-real-project',
        'facebook-github-bot',
        'facebook-github-bot@users.noreply.github.com',
      ),
    ];
  }

  static private function getCredentialsForProjectFrom(
    FBGitHubUtils::TAllCredentials $credentials,
    string $organization,
    string $project,
  ): ShipItGitHubCredentials {
    // UNSAFE_EXPR
    return self::invoke_static_bypass_visibility(
      FBGitHubUtils::class,
      'getCredentialsForProjectFrom',
      $credentials,
      $organization,
      $project,
    );
  }

  /**
   * @dataProvider exampleProjectCredentials
   */
  public function testPerProjectCredentials(
    FBGitHubUtils::TAllCredentials $credentials,
    string $organization,
    string $project,
    string $user,
    string $email,
  ): void {
    $credentials = self::getCredentialsForProjectFrom(
      $credentials,
      $organization,
      $project,
    );

    $this->assertSame(
      $user,
      $credentials['user'],
    );

    $this->assertSame(
      $email,
      $credentials['email'],
    );

    $this->assertLooksLikeAPIToken($credentials['password']);

    // nameof('facebook-github-bot-1') === 'Facebook Github Bot 1'
    $this->assertSame(
      ucwords(strtr($credentials['user'], '-', ' ')),
      $credentials['name'],
    );
  }

  private function assertLooksLikeAPIToken(
    string $password,
  ): void {
    $this->assertTrue(
      strlen($password) === 40,
      'Password field has unexpected length: '.strlen($password),
    );
    $this->assertTrue(
      ctype_xdigit($password),
      'Password field is not hex-like',
    );
  }
}
