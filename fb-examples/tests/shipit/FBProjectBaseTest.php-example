<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * This file was moved from fbsource to www. View old history in diffusion:
 * https://fburl.com/ippot1ds
 */
namespace Facebook\ShipIt;

use namespace HH\Lib\{Str, Dict};


abstract class FBProjectBaseTest extends FBBaseTest {
  /**
   * Whether or not the filter removes summaries that don't include "@public".
   *
   * This should almost always be false; despite usually having the same
   * implementation, it's abstract so that the behavior is explicit in each
   * project test.
   */
  abstract protected function removesSummariesByDefault(): bool;

  /**
   * Example input/output paths for filter.
   *
   * @returns a map from source path to either a destination path, or null if
   *   changes to the specified internal path should be removed from the
   *   destination repository.
   */
  public static abstract function getExamplePathMappings(
  ): dict<string, ?string>;

  protected abstract static function map(
    ShipItChangeset $changeset,
  ): ShipItChangeset;

  public static function exampleMessagesWithDifferentialURLs(
  ): vec<(string, string)> {
    return vec[
      tuple('foo', 'foo'),
      tuple('https://phabricator.fb.com/D12345', 'D12345'),
      tuple('Foo https://phabricator.fb.com/D12345 bar', 'Foo D12345 bar'),
      tuple(
        'foo '.
        'https://phabricator.fb.com/D12345 bar '.
        'https://phabricator.fb.com/D6789 baz',
        'foo D12345 bar D6789 baz',
      ),
      tuple('https://phabricator.cstools.facebook.com/D12345', 'D12345'),
      tuple(
        'Foo https://phabricator.cstools.facebook.com/D12345 bar',
        'Foo D12345 bar',
      ),
      tuple('https://phabricator.asuarez.sb.facebook.com/D12345', 'D12345'),
      tuple(
        'Foo https://phabricator.asuarez.sb.facebook.com/D12345 bar',
        'Foo D12345 bar',
      ),
    ];
  }

  public static function examplesForStripSubjectTags(): vec<(string, string)> {
    return vec[
      tuple('foo bar', 'foo bar'),
      tuple('[secret] foo', 'foo'),
      tuple('[secret][super secret] foo bar', 'foo bar'),
      tuple('[secret][super secret] foo bar', 'foo bar'),
      tuple('[secret] [super secret] foo bar', 'foo bar'),
    ];
  }

  <<\DataProvider('examplesForStripSubjectTags')>>
  public function testStripSubjectTags(string $in, string $expected): void {
    $changeset = (new ShipItChangeset())->withSubject($in);
    $changeset = static::map($changeset);
    $out = $changeset->getSubject();
    \expect($out)->toEqual($expected);
  }

  public function testGitHubAuthor(): void {
    $in = (new ShipItChangeset())
      ->withMessage("GitHub Author: Foo Bar <foobar@example.com>");
    $out = static::map($in);
    \expect($out->getAuthor())->toBePHPEqual('Foo Bar <foobar@example.com>');
  }

  public function testGitHubAuthorWithSupportedFieldAfter(): void {
    $in = (new ShipItChangeset())
      ->withMessage(
        "GitHub Author: Foo Bar <foobar@example.com>\n"."Github PR Sync: foo",
      );
    $out = static::map($in);
    \expect($out->getAuthor())->toBePHPEqual('Foo Bar <foobar@example.com>');
  }

  public function testPulledBy(): void {
    $in = (new ShipItChangeset())
      ->withMessage("GitHub Author: Foo Bar <foobar@example.com>")
      ->withAuthor('Fred Emmott <fredemmott@fb.com>');
    $out = static::map($in);
    \expect($out->getAuthor())->toBePHPEqual('Foo Bar <foobar@example.com>');
    \expect($out->getMessage())->toContainSubstring('Pulled By: fredemmott');
  }

  public function testPulledByWithUnixnameDifferentToGithub(): void {
    $in = (new ShipItChangeset())
      ->withMessage("GitHub Author: Foo Bar <foobar@example.com>")
      ->withAuthor('Joel Marcey <joelm@fb.com>');
    $out = static::map($in);
    \expect($out->getAuthor())->toBePHPEqual('Foo Bar <foobar@example.com>');
    \expect($out->getMessage())->toContainSubstring('Pulled By: JoelMarcey');
  }

  public function testPulledByWithBotAuthor(): void {
    $in = (new ShipItChangeset())
      ->withMessage(
        "GitHub Author: Foo Bar <foobar@example.com>\n\n"."Reviewed By: joelm",
      )
      ->withAuthor('svcscm <svcscm@fb.com>');
    $out = static::map($in);
    \expect($out->getAuthor())->toBePHPEqual('Foo Bar <foobar@example.com>');
    \expect($out->getMessage())->toContainSubstring('Pulled By: JoelMarcey');
  }

  public function testPulledByWithBotAuthorAndMultipleReviewers(): void {
    $in = (new ShipItChangeset())
      ->withMessage(
        "GitHub Author: Foo Bar <foobar@example.com>\n\n".
        "Reviewed By: joelm, fredemmott",
      )
      ->withAuthor('svcscm <svcscm@fb.com>');
    $out = static::map($in);
    \expect($out->getAuthor())->toBePHPEqual('Foo Bar <foobar@example.com>');
    \expect($out->getMessage())->toNotContainSubstring('Pulled By: ');
    \expect($out->getMessage())
      ->toContainSubstring('Reviewed By: JoelMarcey, fredemmott');
  }

  public function testNoPulledByIfNoGitHubAuthor(): void {
    $in = (new ShipItChangeset())
      ->withAuthor('Fred Emmott <fe@fb.com>');
    $out = static::map($in);
    \expect($out->getAuthor())->toEqual('Fred Emmott <fe@fb.com>');
    \expect($out->getMessage())->toEqual('');
  }

  public function testReviewerMapping(): void {
    $in = (new ShipItChangeset())
      ->withMessage("Reviewed By: fredemmott, joelm");
    $out = static::map($in);
    \expect($out->getMessage())
      ->toContainSubstring('Reviewed By: fredemmott, JoelMarcey');
  }

  public function testMentionMapping(): void {
    $in = 'Summary: foo @joelm bar';
    $expected = 'Summary: foo JoelMarcey bar';
    if ($this->removesSummariesByDefault()) {
      $in .= ' @public';
    }

    $in = (new ShipItChangeset())->withMessage($in);
    $out = static::map($in);
    \expect($out->getMessage())->toContainSubstring($expected);
  }

  public function testGitSVNAuthor(): void {
    $in = (new ShipItChangeset())
      ->withAuthor("joelm@d8a4e40d-db80-4680-aacd-cdc45a86d7e7");
    $out = static::map($in);
    \expect($out->getAuthor())->toBePHPEqual("Joel Marcey <joelm@fb.com>");
  }

  public function testPullRequestSummariesArePublic(): void {
    $in = ShipItRepoHG::getChangesetFromExportedPatch(
      \file_get_contents(__DIR__.'/../hg-diffs/github-pull-request.header'),
      \file_get_contents(__DIR__.'/../hg-diffs/github-pull-request.patch'),
    );
    $in = \expect($in)->toNotBeNull();
    $out = static::map($in);
    \expect($out->getMessage())->toContainSubstring('Before we would');
  }

  public function testWithoutAlreadyOnGitHub(): void {
    $in = (new ShipItChangeset())
      ->withMessage('herp derp')
      ->withDiffs(
        vec[
          shape('path' => static::getExamplePublicPath(), 'body' => 'herp'),
        ],
      );
    $out = static::map($in);
    \expect($out->isValid())->toBeTrue('Diff was preserved');
  }

  public function testWithAlreadyOnGitHub(): void {
    $in = (new ShipItChangeset())
      ->withMessage('herp derp @already-on-github')
      ->withDiffs(
        vec[
          shape('path' => static::getExamplePublicPath(), 'body' => 'herp'),
        ],
      );
    $out = static::map($in);

    \expect($out->isValid())->toBeFalse();
  }

  public static function exampleBadwordChangesets(
  ): dict<string, vec<ShipItChangeset>> {
    $bw = FBConfidentialFilter::EXAMPLE_BAD_WORD;
    $out = dict[
      'subject' => (new ShipItChangeset())->withSubject($bw),
      'subject lowercase' => (new ShipItChangeset())
        ->withSubject(Str\lowercase($bw)),
      'subject uppercase' => (new ShipItChangeset())
        ->withSubject(Str\uppercase($bw)),
      'subject substr' => (new ShipItChangeset())
        ->withSubject('foo '.$bw.' bar'),
      'message' => (new ShipItChangeset())
        ->withMessage('Summary: @public '.$bw),
      'message line' => (new ShipItChangeset())
        ->withMessage("Summary: @public Foo\n".$bw."\nBar"),
      'code' => (new ShipItChangeset())
        ->withDiffs(vec[
          shape(
            'path' => static::getExamplePublicPath(),
            'body' => $bw.'_SOME_CONST',
          ),
        ]),
      'path' => (new ShipItChangeset())
        ->withDiffs(vec[
          shape(
            'path' => static::getExamplePublicPath().'/'.$bw.'/',
            'body' => 'junk',
          ),
        ]),
      'the badwords list itself' => (new ShipItChangeset())
        ->withDiffs(vec[
          shape(
            'path' => static::getExamplePublicPath().
              '/FBConfiden'.
              'tialFilter.php', // split to avoid triggering filter
            'body' => 'junk',
          ),
        ]),
    ];
    foreach ($out as $k => $v) {
      if (!$v->isValid()) {
        $out[$k] = $v->withDiffs(vec[
          shape(
            'path' => static::getExamplePublicPath(),
            'body' => 'junk',
          ),
        ]);
      }
    }
    return Dict\map_with_key($out, ($k, $v) ==> vec[$v->withID($k)]);
  }

  <<\DataProvider('exampleBadwordChangesets')>>
  public function testBadwords(ShipItChangeset $changeset): void {
    \expect(() ==> {
      static::map($changeset);
    })
      // @oss-disable: ->toThrow(\InvariantViolationException::class);
    ->toThrow(InvariantException::class); // @oss-enable
  }

  public function testBadwordsBinaryFile(): void {
    $changeset = static::exampleBadwordChangesets()['code'][0];
    $binary_file_body = "index 2dc..bc4 123\n".
      "GIT binary patch\n".
      $changeset->getDiffs()[0]['body'];
    $changeset = $changeset->withDiffs(
      vec[
        shape(
          'path' => $changeset->getDiffs()[0]['path'],
          'body' => $binary_file_body,
        ),
      ],
    );
    static::map($changeset);
    // no expected exception
  }

  final public static function examplePathMappings(
  ): dict<string, (string, ?string)> {
    return Dict\map_with_key(
      static::getExamplePathMappings(),
      ($k, $v) ==> tuple($k, $v),
    );
  }

  <<\DataProvider('examplePathMappings')>>
  public function testPathMapping(
    string $path_in,
    ?string $path_expected,
  ): void {
    $diffs = vec[shape('path' => $path_in, 'body' => 'junk')];
    $changeset = (new ShipItChangeset())->withDiffs($diffs);
    $this->pathMappingCheck($changeset, $path_in, $path_expected);
  }

  final protected function pathMappingCheck(
    ShipItChangeset $changeset,
    string $path_in,
    ?string $path_expected,
    bool $mapped = false,
  ): void {
    if (!$mapped) {
      $changeset = static::map($changeset);
    }

    if ($path_expected === null) {
      $expected_paths = vec[];
      $message = Str\format('Expected `%s` to be stripped', $path_in);
    } else {
      $expected_paths = vec[$path_expected];
      $message = Str\format(
        'Expected `%s` to map to `%s`',
        $path_in,
        $path_expected,
      );
    }
    \expect(Vec\map($changeset->getDiffs(), $diff ==> $diff['path']))
      ->toBePHPEqual(
        $expected_paths,
        Str\format(
          "%s.  Debug messages follow:\n%s",
          $message,
          Str\join($changeset->getDebugMessages(), "\n"),
        ),
      );
  }

  // TODO(T22473111) remove after Buck is migrated
  public function testPathMappingsHaveExamples(): void {
    $shipit_class = static::getShipItClass();
    $examples = Vec\keys(static::getExamplePathMappings());
    foreach ($shipit_class::getPathMappings() as $source_path => $_) {
      $found = false;
      foreach ($examples as $example) {
        if (C\starts_with($example, $source_path)) {
          $found = true;
          break;
        }
      }
      if (!$found) {
        self::fail(
          'Source path "'.$source_path.'" has no examples defined in tests.',
        );
      }
    }
  }

  final protected static function getExamplePublicPath(): string {
    foreach (static::getExamplePathMappings() as $source => $dest) {
      if ($dest !== null) {
        return $source;
      }
    }
    self::fail("No example public paths provided");
    invariant_violation('test fails should throw');
  }

  // TODO(T22473111) remove after Buck is migrated
  public function testRepositoryNameCollision(): void {
    $shipit_class = static::getShipItClass();
    $config = $shipit_class::getBaseConfig();
    \expect($config->getDestinationPath())->toNotBePHPEqual(
      $config->getSourcePath(),
      'Repo names match and `getStaticConfig` has not set `destDirName` to '.
      'something unique for the destination repository!',
    );
  }

  // TODO(T22473111) remove after Buck is migrated
  public function testSourceRootsAreDirectories(): void {
    $shipit_class = static::getShipItClass();
    $config = $shipit_class::getBaseConfig();
    $roots = $config->getSourceRoots();
    foreach ($roots as $root) {
      \expect(Str\slice($root, -1) === '/')->toBeTrue(
        Str\format(
          'Expected `%s` to end in `/` (source roots must be a folder).',
          $root,
        ),
      );
    }
  }

  // TODO(T22473111) remove after Buck is migrated
  protected static function getShipItClass(
  ): classname<\Facebook\ImportIt\ISupportsFBImportIt> {
    /* HH_IGNORE_ERROR[2049] __PHPStdLib */
    /* HH_IGNORE_ERROR[4107] __PHPStdLib */
    $shipit_class = \preg_replace(
      '/([a-zA-Z0-9_]+)Test$/',
      'ShipIt\1',
      static::class,
    );
    invariant(
      /* HH_IGNORE_ERROR[2049] __PHPStdLib */
      /* HH_IGNORE_ERROR[4107] __PHPStdLib */
      \class_exists($shipit_class, false),
      '%s does not exist.  Test and ShipIt class are not named consistently.',
      $shipit_class,
    );
    return $shipit_class;
  }

  /*
   * Check for stripping the auto-generated Test Plan by ImportIt
   */
  public function testEmptyImportTestPlan(): void {
    $in = (new ShipItChangeset())
      ->withMessage('Test Plan:'.FBCommonFilters::NOT_A_TEST_PLAN);
    $out = static::map($in);
    \expect($out->getMessage())->toNotContainSubstring('Test Plan:');
  }
}
