<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
namespace Facebook\ShipIt;

use \Facebook\ImportIt\ {
  ImportItPathMappings
};

abstract class FBProjectBaseTest extends BaseTest {
  /**
   * Whether or not the filter removes summaries that don't include "@public".
   *
   * This should almost always be false; despite usually having the same
   * implementation, it's abstract so that the behavior is explicit in each
   * project test.
   */
  abstract protected function removesSummariesByDefault(): bool;

  /**
   * Example input/output paths for filter.
   *
   * @returns a map from source path to either a destination path, or null if
   *   changes to the specified internal path should be removed from the
   *   destination repository.
   */
  public static abstract function getExamplePathMappings(
  ): ImmMap<string, ?string>;

  protected abstract static function map(
    ShipItChangeset $changeset,
  ): ShipItChangeset;

  public function exampleMessagesWithDifferentialURLs(
  ): array<(string, string)> {
    return [
      tuple('foo', 'foo'),
      tuple('https://phabricator.fb.com/D12345', 'D12345'),
      tuple('Foo https://phabricator.fb.com/D12345 bar', 'Foo D12345 bar'),
      tuple(
        'foo '.
          'https://phabricator.fb.com/D12345 bar '.
          'https://phabricator.fb.com/D6789 baz',
        'foo D12345 bar D6789 baz',
      ),
      tuple(
        'https://phabricator.cstools.facebook.com/D12345',
        'D12345'
      ),
      tuple(
        'Foo https://phabricator.cstools.facebook.com/D12345 bar',
        'Foo D12345 bar'
      ),
      tuple(
        'https://phabricator.asuarez.sb.facebook.com/D12345',
        'D12345'
      ),
      tuple(
        'Foo https://phabricator.asuarez.sb.facebook.com/D12345 bar',
        'Foo D12345 bar'
      ),
    ];
  }

  public function examplesForStripSubjectTags(
  ): array<(string, string)> {
    return [
      tuple('foo bar', 'foo bar'),
      tuple('[secret] foo', 'foo'),
      tuple('[secret][super secret] foo bar', 'foo bar'),
      tuple('[secret][super secret] foo bar', 'foo bar'),
      tuple('[secret] [super secret] foo bar', 'foo bar'),
    ];
  }

  /**
   * @dataProvider examplesForStripSubjectTags
   */
  public function testStripSubjectTags(
    string $in,
    string $expected,
  ): void {
    $changeset = (new ShipItChangeset())->withSubject($in);
    $changeset = static::map($changeset);
    $out = $changeset->getSubject();
    $this->assertSame($expected, $out);
  }

  public function testGitHubAuthor(): void {
    $in = (new ShipItChangeset())
      ->withMessage("GitHub Author: Foo Bar <foobar@example.com>");
    $out = static::map($in);
    $this->assertEquals('Foo Bar <foobar@example.com>', $out->getAuthor());
  }

  public function testGitHubAuthorWithSupportedFieldAfter(): void {
    $in = (new ShipItChangeset())
      ->withMessage(
        "GitHub Author: Foo Bar <foobar@example.com>\n".
        "Github PR Sync: foo",
      );
    $out = static::map($in);
    $this->assertEquals('Foo Bar <foobar@example.com>', $out->getAuthor());
  }

  public function testPulledBy(): void {
    $in = (new ShipItChangeset())
      ->withMessage("GitHub Author: Foo Bar <foobar@example.com>")
      ->withAuthor('Fred Emmott <fredemmott@fb.com>');
    $out = static::map($in);
    $this->assertEquals('Foo Bar <foobar@example.com>', $out->getAuthor());
    $this->assertContains(
      'Pulled By: fredemmott',
      $out->getMessage(),
    );
  }

  public function testPulledByWithUnixnameDifferentToGithub(): void {
    $in = (new ShipItChangeset())
      ->withMessage("GitHub Author: Foo Bar <foobar@example.com>")
      ->withAuthor('Joel Marcey <joelm@fb.com>');
    $out = static::map($in);
    $this->assertEquals('Foo Bar <foobar@example.com>', $out->getAuthor());
    $this->assertContains(
      'Pulled By: JoelMarcey',
      $out->getMessage(),
    );
  }

  public function testPulledByWithBotAuthor(): void {
    $in = (new ShipItChangeset())
      ->withMessage(
        "GitHub Author: Foo Bar <foobar@example.com>\n\n".
        "Reviewed By: joelm"
      )
      ->withAuthor('svcscm <svcscm@fb.com>');
    $out = static::map($in);
    $this->assertEquals('Foo Bar <foobar@example.com>', $out->getAuthor());
    $this->assertContains(
      'Pulled By: JoelMarcey',
      $out->getMessage(),
    );
  }

  public function testPulledByWithBotAuthorAndMultipleReviewers(): void {
    $in = (new ShipItChangeset())
      ->withMessage(
        "GitHub Author: Foo Bar <foobar@example.com>\n\n".
        "Reviewed By: joelm, fredemmott"
      )
      ->withAuthor('svcscm <svcscm@fb.com>');
    $out = static::map($in);
    $this->assertEquals('Foo Bar <foobar@example.com>', $out->getAuthor());
    $this->assertNotContains(
      'Pulled By: ',
      $out->getMessage(),
    );
    $this->assertContains(
      'Reviewed By: JoelMarcey, fredemmott',
      $out->getMessage(),
    );
  }

  public function testNoPulledByIfNoGitHubAuthor(): void {
    $in = (new ShipItChangeset())
      ->withAuthor('Fred Emmott <fe@fb.com>');
    $out = static::map($in);
    $this->assertSame('Fred Emmott <fe@fb.com>', $out->getAuthor());
    $this->assertSame('', $out->getMessage());
  }

  public function testReviewerMapping(): void {
    $in = (new ShipItChangeset())
      ->withMessage("Reviewed By: fredemmott, joelm");
    $out = static::map($in);
    $this->assertContains(
      'Reviewed By: fredemmott, JoelMarcey',
      $out->getMessage(),
    );
  }

  public function testMentionMapping(): void {
    $in = 'Summary: foo @joelm bar';
    $expected = 'Summary: foo JoelMarcey bar';
    if ($this->removesSummariesByDefault()) {
      $in .= ' @public';
    }

    $in = (new ShipItChangeset())->withMessage($in);
    $out = static::map($in);
    $this->assertContains($expected, $out->getMessage());
  }

  public function testGitSVNAuthor(): void {
    $in = (new ShipItChangeset())
      ->withAuthor("joelm@d8a4e40d-db80-4680-aacd-cdc45a86d7e7");
    $out = static::map($in);
    $this->assertEquals("Joel Marcey <joelm@fb.com>", $out->getAuthor());
  }

  public function testPullRequestSummariesArePublic(): void {
    $in = ShipItRepoHG::getChangesetFromExportedPatch(
      \file_get_contents(__DIR__.'/../hg-diffs/github-pull-request.header'),
      \file_get_contents(__DIR__.'/../hg-diffs/github-pull-request.patch'),
    );
    $this->assertNotNull($in);
    assert($in !== null); // for typechecker
    $out = static::map($in);
    $this->assertContains('Before we would', $out->getMessage());
  }

  public function testWithoutAlreadyOnGitHub(): void {
    $in = (new ShipItChangeset())
      ->withMessage('herp derp')
      ->withDiffs( ImmVector {
        shape('path' => $this->getExamplePublicPath(), 'body' => 'herp')
      });
    $out = static::map($in);
    $this->assertTrue($out->isValid(), 'Diff was preserved');
  }

  public function testWithAlreadyOnGitHub(): void {
    $in = (new ShipItChangeset())
      ->withMessage('herp derp @already-on-github')
      ->withDiffs( ImmVector {
        shape('path' => $this->getExamplePublicPath(), 'body' => 'herp')
      });
    $out = static::map($in);

    $this->assertFalse($out->isValid());
  }

  public function exampleBadwordChangesets(
  ): array<string, array<ShipItChangeset>> {
    $bw = FBConfidentialFilter::EXAMPLE_BAD_WORD;
    $out = Map {
      'subject' => (new ShipItChangeset())->withSubject($bw),
      'subject lowercase' => (new ShipItChangeset())
        ->withSubject(\strtolower($bw)),
      'subject uppercase' => (new ShipItChangeset())
        ->withSubject(\strtoupper($bw)),
      'subject substr' => (new ShipItChangeset())
        ->withSubject('foo '.$bw. ' bar'),
      'message' => (new ShipItChangeset())
        ->withMessage('Summary: @public '.$bw),
      'message line' => (new ShipItChangeset())
        ->withMessage("Summary: @public Foo\n".$bw."\nBar"),
      'code' => (new ShipItChangeset())
        ->withDiffs(ImmVector {
          shape(
            'path' => $this->getExamplePublicPath(),
            'body' => $bw.'_SOME_CONST',
          ),
        }),
      'path' => (new ShipItChangeset())
        ->withDiffs(ImmVector {
          shape(
            'path' => $this->getExamplePublicPath().'/'.$bw.'/',
            'body' => 'junk',
          ),
        }),
      'the badwords list itself' => (new ShipItChangeset())
        ->withDiffs(ImmVector {
          shape(
            'path' => $this->getExamplePublicPath().
            '/FBConfiden'.'tialFilter.php', // split to avoid triggering filter
            'body' => 'junk',
          ),
        }),
    };
    foreach ($out as $k => $v) {
      if (!$v->isValid()) {
        $out[$k] = $v->withDiffs(ImmVector { shape(
          'path' => $this->getExamplePublicPath(),
          'body' => 'junk',
        )});
      }
    }
    return $out->mapWithKey(($k, $v) ==> [$v->withID($k)])->toArray();
  }

  /**
   * @dataProvider exampleBadwordChangesets
   * @expectedException \HH\InvariantException
   */
  public function testBadwords(ShipItChangeset $changeset): void {
    static::map($changeset);
    // assertion is the @expectedException
  }

  public function testBadwordsBinaryFile(): void {
    $changeset = $this->exampleBadwordChangesets()['code'][0];
    $binary_file_body = "index 2dc..bc4 123\n".
      "GIT binary patch\n".
      $changeset->getDiffs()[0]['body'];
    $changeset = $changeset->withDiffs(
      ImmVector {
        shape(
          'path' => $changeset->getDiffs()[0]['path'],
          'body' => $binary_file_body,
        )
      }
    );
    static::map($changeset);
    // no expected exception
  }

  // TODO(T22473111) remove after Buck is migrated
  public function testFileNameMatchesRepo(): void {
    $shipit_class = static::getShipItClass();
    $config = $shipit_class::getStaticConfig();
    $reflector = new \ReflectionClass($shipit_class);
    $this->assertEquals(
      'shipit_'.$config['githubProject'].'.php',
      \basename($reflector->getFileName()),
      'ShipIt executable must match GitHub Repo: '.$shipit_class
    );
  }

  final public function examplePathMappings(
  ): array<string, (string, ?string)> {
    return static::getExamplePathMappings()
      ->mapWithKey(($k, $v) ==> tuple($k, $v))
      ->toArray();
  }

  /**
   * @dataProvider examplePathMappings
   */
  final public function testPathMapping(
    string $path_in,
    ?string $path_expected,
  ): void {
    $diffs = ImmVector { shape('path' => $path_in, 'body' => 'junk') };
    $changeset = (new ShipItChangeset())->withDiffs($diffs);
    $this->pathMappingCheck($changeset, $path_in, $path_expected);
  }

  final protected function pathMappingCheck(
    ShipItChangeset $changeset,
    string $path_in,
    ?string $path_expected,
    bool $mapped = false,
  ): void {
    if (!$mapped) {
      $changeset = static::map($changeset);
    }

    if ($path_expected === null) {
      $expected_paths = [];
      $message = \sprintf('Expected `%s` to be stripped', $path_in);
    } else {
      $expected_paths = [$path_expected];
      $message = \sprintf(
        'Expected `%s` to map to `%s`',
        $path_in,
        $path_expected,
      );
    }
    $this->assertEquals(
      $expected_paths,
      $changeset->getDiffs()->map($diff ==> $diff['path'])->toArray(),
      \sprintf(
        "%s.  Debug messages follow:\n%s",
        $message,
        \implode("\n", $changeset->getDebugMessages()),
      ),
    );
  }

  // TODO(T22473111) remove after Buck is migrated
  public function testPathMappingsHaveExamples(): void {
    $shipit_class = static::getShipItClass();
    $examples = static::getExamplePathMappings()->keys();
    foreach ($shipit_class::getPathMappings()->keys() as $source_path) {
      $found = false;
      foreach ($examples as $example) {
        if (\strncmp($example, $source_path, \strlen($source_path)) === 0) {
          $found = true;
          break;
        }
      }
      if (!$found) {
        $this->fail(
          'Source path "'.$source_path.'" has no examples defined in tests.',
        );
      }
    };
  }

  final protected function getExamplePublicPath(): string {
    foreach (static::getExamplePathMappings() as $source => $dest) {
      if ($dest !== null) {
        return $source;
      }
    }
    $this->fail("No example public paths provided");
    invariant_violation('test fails should throw');
  }

  // TODO(T22473111) remove after Buck is migrated
  public function testRepositoryNameCollision(): void {
    $shipit_class = static::getShipItClass();
    $config = $shipit_class::getBaseConfig();
    $this->assertNotEquals(
      $config->getSourcePath(),
      $config->getDestinationPath(),
      'Repo names match and `getStaticConfig` has not set `destDirName` to '.
        'something unique for the destination repository!',
    );
  }

  // TODO(T22473111) remove after Buck is migrated
  public function testSourceRootsAreDirectories(): void {
    $shipit_class = static::getShipItClass();
    $config = $shipit_class::getBaseConfig();
    $roots = $config->getSourceRoots();
    foreach ($roots as $root) {
      $this->assertTrue(
        \substr($root, -1) === '/',
        \sprintf(
          'Expected `%s` to end in `/` (source roots must be a folder).',
          $root,
        ),
      );
    }
  }

  // TODO(T22473111) remove after Buck is migrated
  protected static function getShipItClass(
  ): classname<\Facebook\ImportIt\ISupportsFBImportIt> {
    $shipit_class = \preg_replace(
      '/([a-zA-Z0-9_]+)Test$/',
      'ShipIt\1',
      static::class,
    );
    invariant(
      \class_exists($shipit_class, false),
      '%s does not exist.  Test and ShipIt class are not named consistently.',
      $shipit_class,
    );
    return $shipit_class;
  }

  /*
   * Check for stripping the auto-generated Test Plan by ImportIt
   */
  public function testEmptyImportTestPlan(): void {
    $in = (new ShipItChangeset())
      ->withMessage('Test Plan:'.
      FBCommonFilters::NOT_A_TEST_PLAN);
    $out = static::map($in);
    $this->assertNotContains('Test Plan:', $out->getMessage());
  }
}
