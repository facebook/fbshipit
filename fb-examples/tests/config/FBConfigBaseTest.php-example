<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
namespace Facebook\ShipIt\Config;

use type Facebook\ShipIt\{
  FBPublicProjectBaseTest,
  FBShipItConfig,
  ShipItChangeset,
  ShipItSubmoduleFilter,
  FBSourceBranchConfig,
};

use type Facebook\ImportIt\{
  ImportItSubmoduleFilter,
};

abstract class FBConfigBaseTest extends FBPublicProjectBaseTest {
  // This usually doesn't need setting - it's useful if implementing
  // another abstract class, eg FBWWWConfigBaseTest
  const type TConfigClassBase as FBShipItConfig = FBShipItConfig;

  protected static function getDefaultBranchConfig(): FBSourceBranchConfig {
    $config_class = static::getConfigClass();
    $branch_configs = $config_class::getBranchConfigs();
    return $branch_configs[0];
  }

  <<__Override>>
  final protected static function map(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    $config_class = static::getConfigClass();
    $branch_config = static::getDefaultBranchConfig();
    return $config_class::filterChangeset($changeset, $branch_config);
  }

  <<__Override>>
  protected function removesSummariesByDefault(): bool {
    return false;
  }

  <<__Override>>
  final public function testFileNameMatchesRepo(): void {
    $config_class = self::getConfigClass();
    $config = $config_class::getStaticConfig();
    $reflector = new \ReflectionClass($config_class);
    $this->assertEquals(
      $config['githubOrg'],
      \basename(\dirname($reflector->getFileName())),
      'Config parent directory must match GitHub Org: '.$config_class
    );
    $this->assertEquals(
      $config['githubProject'].'.php',
      \basename($reflector->getFileName()),
      'Config filename must match GitHub Repo: '.$config_class
    );
  }

  final protected static function getConfigClass(
  ): classname<this::TConfigClassBase> {
    $config_class = \preg_replace(
      '/([a-zA-Z0-9_]+)Test$/',
      '\1',
      static::class,
    );
    invariant(
      \class_exists($config_class, true),
      '%s does not exist.  Test and ShipIt class are not named consistently.',
      $config_class,
    );
    return $config_class;
  }

  final public function testUniqueExternalBranchConfigs(): void {
    $config_class = static::getConfigClass();
    $branch_configs = $config_class::getBranchConfigs();
    $external_branches = $branch_configs->map(
      $branch_config ==> $branch_config['external']
    );
    $this->assertEquals(
      $external_branches->toSet()->count(),
      $external_branches->count(),
      'getBranchConfigs contains multiple configs for one external branch, '.
      'which is not allowed.',
    );
  }

  /**
   * Example path mappings for each shipped destination branch.
   * Override this method if your project has custom branch configuration.
   */
  protected static function getExampleBranchMappings(
  ): ImmMap<string, ImmMap<string, ?string>> {
    return ImmMap {
      'master' => static::getExamplePathMappings(),
    };
  }

  <<__Override>>
  final public function testPathMappingsHaveExamples(): void {
    $config_class = static::getConfigClass();
    $examples = static::getExamplePathMappings()->keys();
    foreach ($config_class::getDefaultPathMappings()->keys() as $source_path) {
      $found = false;
      foreach ($examples as $example) {
        if (\strncmp($example, $source_path, \strlen($source_path)) === 0) {
          $found = true;
          break;
        }
      }
      if (!$found) {
        $this->fail(
          'Source path "'.$source_path.'" has no examples defined in tests.',
        );
      }
    };
  }

  <<__Override>>
  public function testRepositoryNameCollision(): void {
    $config_class = static::getConfigClass();
    $config = $config_class::getBaseConfig(static::getDefaultBranchConfig());
    $this->assertNotEquals(
      $config->getSourcePath(),
      $config->getDestinationPath(),
      'Repo names match and `getStaticConfig` has not set `destDirName` to '.
        'something unique for the destination repository!',
    );
  }

  <<__Override>>
  public function testSourceRootsAreDirectories(): void {
    $config_class = static::getConfigClass();
    $config = $config_class::getBaseConfig(static::getDefaultBranchConfig());
    $roots = $config->getSourceRoots();
    foreach ($roots as $root) {
      $this->assertTrue(
        \substr($root, -1) === '/',
        \sprintf(
          'Expected `%s` to end in `/` (source roots must be a folder).',
          $root,
        ),
      );
    }
  }

  final public function testSubmodulesAreFilteredCorrectly(): void {
    $config_class = static::getConfigClass();
    $parents = new Set(\class_parents($config_class));
    foreach ($config_class::getSubmoduleMappings() as $rev_file => $dest) {
      $changeset = (new ShipItChangeset())
        ->withDiffs(ImmVector {
          shape(
            'path' => $rev_file,
            'body' => (string) self::invoke_static_bypass_visibility(
              ShipItSubmoduleFilter::class,
              'makeSubmoduleDiff',
              $rev_file,
              'deadbeef1',
              'deadbeef2',
            ),
          ),
        });
      $this->pathMappingCheck($changeset, $rev_file, $dest);
    }
  }

  final public function testBranchConfigs(): void {
    $config_class = static::getConfigClass();
    $branch_configs = $config_class::getBranchConfigs();
    $external_branches = $branch_configs->map(
      $branch_config ==> $branch_config['external']
    );
    $branch_examples = static::getExampleBranchMappings();
    // invariant instead of assertion to avoid confusing failure output
    invariant(
      $branch_examples->keys()->toSet() == $external_branches->toSet(),
      'getExampleBranchMappings does not match %s::getBranchConfigs. '.
      'If you have multiple branches configured, you must define '.
      '%s::getExampleBranchMappings',
      $config_class,
      static::class,
    );
    $branch_config_map = ImmMap::fromItems(
      $external_branches->zip($branch_configs),
    );
    foreach ($branch_examples as $external_branch => $examples) {
      foreach ($examples as $path_in => $path_expected) {
        $diffs = ImmVector { shape('path' => $path_in, 'body' => 'junk') };
        $changeset = (new ShipItChangeset())->withDiffs($diffs);
        $branch_config = $branch_config_map[$external_branch];
        $mapped = $config_class::filterChangeset($changeset, $branch_config);
        $this->pathMappingCheck($mapped, $path_in, $path_expected, true);
      }
    }
  }

  /////////////////////////
  //
  // ImportIt config tests
  //
  /////////////////////////

  /**
   * Example input/output paths for filter.
   *
   * Projects can override this, but by default, it uses the inverse of the
   * ShipIt example.
   *
   * @returns a map from source path to either a destination path, or null if
   *   changes to the specified internal path should be removed from the
   *   destination repository.
   */
  protected static function getExampleImportPathMappings(
  ): ImmMap<string, string> {
    $shipit_examples = static::getExamplePathMappings();
    $mapping = Map {};
    foreach ($shipit_examples as $dest_path => $src_path) {
      if ($src_path === null) {
        continue;
      }
      $mapping[$src_path] = $dest_path;
    }
    return $mapping->toImmMap();
  }

  protected static function mapImport(
    \Facebook\ShipIt\ShipItChangeset $changeset,
  ): \Facebook\ShipIt\ShipItChangeset {
    $config_class = static::getConfigClass();
    return $config_class::importChangeset(
      $changeset,
      static::getDefaultBranchConfig(),
    );
  }

  final public function exampleImportPathMappings(
  ): array<string, (string, ?string)> {
    return static::getExampleImportPathMappings()
      ->mapWithKey(($k, $v) ==> tuple($k, $v))
      ->toArray();
  }

  /**
   * @dataProvider exampleImportPathMappings
   */
  final public function testImportPathMapping(
    string $path_in,
    ?string $path_expected,
  ): void {
    $diffs = ImmVector { shape('path' => $path_in, 'body' => 'junk') };
    $changeset = (new ShipItChangeset())->withDiffs($diffs);
    $changeset = static::mapImport($changeset);
    $this->pathMappingCheck(
      $changeset,
      $path_in,
      $path_expected,
      /* mapped */ true,
    );
  }

  final protected function importPathMappingCheck(
    ShipItChangeset $changeset,
    string $path_in,
    ?string $path_expected,
  ): void {
    $changeset = static::mapImport($changeset);

    if ($path_expected === null) {
      $expected_paths = [];
      $message = \sprintf('Expected `%s` to be stripped', $path_in);
    } else {
      $expected_paths = [$path_expected];
      $message = \sprintf(
        'Expected `%s` to map to `%s`',
        $path_in,
        $path_expected,
      );
    }
    $this->assertEquals(
      $expected_paths,
      $changeset->getDiffs()->map($diff ==> $diff['path'])->toArray(),
      \sprintf(
        "%s.  Debug messages follow:\n%s",
        $message,
        \implode("\n", $changeset->getDebugMessages()),
      ),
    );
  }

  final public function testImportBranches(): void {
    $config_class = static::getConfigClass();
    $importit_base_config = $config_class::getImportBaseConfig(
      static::getDefaultBranchConfig(),
    );
    $shipit_base_config = $config_class::getBaseConfig(
      static::getDefaultBranchConfig(),
    );
    $this->assertEquals(
      $shipit_base_config->getSourceBranch(),
      $importit_base_config->getDestinationBranch(),
      'Destination branch should be the inverse of the source branch.',
    );
    $this->assertEquals(
      $shipit_base_config->getDestinationBranch(),
      $importit_base_config->getSourceBranch(),
      'Source branch should be the inverse of the destination branch.',
    );
  }

  final public function testImportRepositoryNameCollision(): void {
    $config_class = static::getConfigClass();
    $config = $config_class::getImportBaseConfig(
      static::getDefaultBranchConfig(),
    );
    $this->assertNotEquals(
      $config->getSourcePath(),
      $config->getDestinationPath(),
      'ShipIt repo names match and `getStaticConfig` has not set '.
        '`destDirName` to something unique for the destination repository!',
    );
  }

  final public function testSubmodulesAreImportedCorrectly(): void {
    $config_class = static::getConfigClass();
    $parents = new Set(\class_parents($config_class));
    foreach ($config_class::getSubmoduleMappings() as $rev_file => $dest) {
      $changeset = (new ShipItChangeset())
        ->withDiffs(ImmVector {
          shape(
            'path' => $rev_file,
            'body' => (string) self::invoke_static_bypass_visibility(
              ImportItSubmoduleFilter::class,
              'makeSubmoduleDiff',
              $rev_file,
              'deadbeef1',
              'deadbeef2',
            ),
          ),
        });
      $this->importPathMappingCheck($changeset, $dest, $rev_file);
    }
  }

  final public function testGetLandBranch(): void {
    $config_class = static::getConfigClass();
    $land_branch = $config_class::getLandBranch();
    if ($land_branch !== null) {
        $this->assertContains(
          $land_branch,
          $config_class::getBranchConfigs()->map($bc ==> $bc['internal']),
          'Arc land branch '.$land_branch.' not found in branch configs!',
        );
    }
  }
}
