<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
namespace Facebook\ImportIt;

use \Facebook\ShipIt\ {
  ShipItChangeset
};

// TODO(T22473111) delete this class after Buck is migrated
abstract class FBProjectBaseTest extends \Facebook\ShipIt\BaseTest {
  abstract const type TImportIt as FBImportItCLI;
  abstract const type TShipItTest as \Facebook\ShipIt\FBProjectBaseTest;

  /**
   * Example input/output paths for filter.
   *
   * Projects can override this, but by default, it uses the inverse of the
   * ShipIt test.
   *
   * @returns a map from source path to either a destination path, or null if
   *   changes to the specified internal path should be removed from the
   *   destination repository.
   */
  protected static function getExamplePathMappings(
  ): ImmMap<string, string> {
    $shipit_test_class = static::getShipItTestClass();
    $shipit_examples = $shipit_test_class::getExamplePathMappings();
    $mapping = Map {};
    foreach ($shipit_examples as $dest_path => $src_path) {
      if ($src_path === null) {
        continue;
      }
      $mapping[$src_path] = $dest_path;
    }
    return $mapping->toImmMap();
  }

  protected static function map(
    \Facebook\ShipIt\ShipItChangeset $changeset,
  ): \Facebook\ShipIt\ShipItChangeset {
    $importit_class = static::getImportItClass();
    return $importit_class::filterChangeset($changeset);
  }

  public function testFileNameMatchesRepo(): void {
    $importit_class = self::getImportItClass();
    $config = $importit_class::getStaticConfig();
    $reflector = new \ReflectionClass($importit_class);

    $this->assertEquals(
      'importit_'.$config['githubProject'].'.php',
      \basename($reflector->getFileName()),
      'ImportIt executable must match GitHub Repo: '.$importit_class,
    );
  }

  final public function examplePathMappings(
  ): array<string, (string, ?string)> {
    return static::getExamplePathMappings()
      ->mapWithKey(($k, $v) ==> tuple($k, $v))
      ->toArray();
  }

  /**
   * @dataProvider examplePathMappings
   */
  final public function testPathMapping(
    string $path_in,
    ?string $path_expected,
  ): void {
    $diffs = ImmVector { shape('path' => $path_in, 'body' => 'junk') };
    $changeset = (new ShipItChangeset())->withDiffs($diffs);
    $this->pathMappingCheck($changeset, $path_in, $path_expected);
  }

  final protected function pathMappingCheck(
    ShipItChangeset $changeset,
    string $path_in,
    ?string $path_expected,
  ): void {
    $changeset = static::map($changeset);

    if ($path_expected === null) {
      $expected_paths = [];
      $message = \sprintf('Expected `%s` to be stripped', $path_in);
    } else {
      $expected_paths = [$path_expected];
      $message = \sprintf(
        'Expected `%s` to map to `%s`',
        $path_in,
        $path_expected,
      );
    }
    $this->assertEquals(
      $expected_paths,
      $changeset->getDiffs()->map($diff ==> $diff['path'])->toArray(),
      \sprintf(
        "%s.  Debug messages follow:\n%s",
        $message,
        \implode("\n", $changeset->getDebugMessages()),
      ),
    );
  }

  final public function testBranches(): void {
    $importit_class = static::getImportItClass();
    $shipit_class = static::getShipItClass();
    $importit_base_config = $importit_class::getBaseConfig();
    $shipit_base_config = $shipit_class::getBaseConfig();
    $this->assertEquals(
      $shipit_base_config->getSourceBranch(),
      $importit_base_config->getDestinationBranch(),
      'Destination branch should be the inverse of the source branch.',
    );
    $this->assertEquals(
      $shipit_base_config->getDestinationBranch(),
      $importit_base_config->getSourceBranch(),
      'Source branch should be the inverse of the destination branch.',
    );
  }

  final public function testRepositoryNameCollision(): void {
    $importit_class = self::getImportItClass();
    $config = $importit_class::getBaseConfig();
    $this->assertNotEquals(
      $config->getSourcePath(),
      $config->getDestinationPath(),
      'ShipIt repo names match and `getStaticConfig` has not set '.
        '`destDirName` to something unique for the destination repository!',
    );
  }

  final protected static function getImportItClass(
  ): classname<FBImportItCLI> {
    $ts = type_structure(static::class, 'TImportIt');
    invariant($ts['kind'] === TypeStructureKind::OF_CLASS, 'unexpected type');
    return $ts['classname'];
  }

  final protected static function getShipItClass(
  ): classname<ISupportsFBImportIt> {
    // UNSAFE_EXPR
    return self::invoke_static_bypass_visibility(
      static::getImportItClass(),
      'getShipItClass',
    );
  }

  final protected static function getShipItTestClass(
  ): classname<\Facebook\ShipIt\FBProjectBaseTest> {
    $ts = type_structure(static::class, 'TShipItTest');
    invariant($ts['kind'] === TypeStructureKind::OF_CLASS, 'unexpected type');
    return $ts['classname'];
  }
}
